<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YDWE官方博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ydwe.net/"/>
  <updated>2017-03-22T13:29:37.557Z</updated>
  <id>http://www.ydwe.net/</id>
  
  <author>
    <name>actboy168</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>新的主题</title>
    <link href="http://www.ydwe.net/2017/03/new-theme/"/>
    <id>http://www.ydwe.net/2017/03/new-theme/</id>
    <published>2017-03-22T13:19:00.000Z</published>
    <updated>2017-03-22T13:29:37.557Z</updated>
    
    <content type="html"><![CDATA[<p>今天得知“多说评论”要跪了，所以花了点时间把评论系统迁移到了“网易云跟帖”。又顺便把博客引擎从<strong>Octopress</strong>切换到了<strong>Hexo</strong>。毕竟只是为了一个博客装了个ruby，还是挺麻烦的。如果可以甚至我想换成lua的引擎，可惜没有找到比较靠谱的。</p>
<a id="more"></a>
<p>“网易云跟帖”可以直接导入“多说评论”的数据，所以迁移的过程还是比较简单的。只是碰到一个小问题，在多说导出的数据中，url的最后是没有’/‘的，但实际博客中的url最后都带了’/‘，网易无法识别这种情况。所以我只能手动帮网易去掉了这个’/‘。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.cloud-tie-wrapper(id=<span class="string">"cloud-tie-wrapper"</span>)</div><div class="line">script(src=<span class="string">'https://img1.cache.netease.com/f2e/tie/yun/sdk/loader.js'</span>)</div><div class="line">script.</div><div class="line">    var url = <span class="built_in">document</span>.location.href;</div><div class="line">    <span class="keyword">if</span> (url.substring(url.length<span class="number">-1</span>) == <span class="string">'/'</span>) &#123;</div><div class="line">        url = url.substring(<span class="number">0</span>, url.length<span class="number">-1</span>)</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> cloudTieConfig = &#123;</div><div class="line">      <span class="attr">url</span>: url,</div><div class="line">      <span class="attr">sourceId</span>: <span class="string">""</span>,</div><div class="line">      <span class="attr">productKey</span>: <span class="string">"04f8b460aaca4ca08df51bb3e40f6025"</span>,</div><div class="line">      <span class="attr">target</span>: <span class="string">"cloud-tie-wrapper"</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> yunManualLoad = <span class="literal">true</span>;</div><div class="line">    Tie.loader(<span class="string">"aHR0cHM6Ly9hcGkuZ2VudGllLjE2My5jb20vcGMvbGl2ZXNjcmlwdC5odG1s"</span>, <span class="literal">true</span>);</div></pre></td></tr></table></figure>
<p>因为换了博客引擎，所以主题也只能换了一个，为了配合这个简洁风格的主题，我还特意做个了一个像素风的logo。这个主题可能比较简陋，也可能没原来的好看，但我觉得挺符合我目前心境和YDWE目前的状态的。内容比较外观重要不是吗？</p>
<p><img src="/favicon.png" alt="logo"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天得知“多说评论”要跪了，所以花了点时间把评论系统迁移到了“网易云跟帖”。又顺便把博客引擎从&lt;strong&gt;Octopress&lt;/strong&gt;切换到了&lt;strong&gt;Hexo&lt;/strong&gt;。毕竟只是为了一个博客装了个ruby，还是挺麻烦的。如果可以甚至我想换成lua的引擎，可惜没有找到比较靠谱的。&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://www.ydwe.net/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>W3x2Lni 报告说明</title>
    <link href="http://www.ydwe.net/2017/02/w2l-report/"/>
    <id>http://www.ydwe.net/2017/02/w2l-report/</id>
    <published>2017-02-17T12:16:00.000Z</published>
    <updated>2017-03-01T06:49:11.968Z</updated>
    
    <content type="html"><![CDATA[<p>使用W3x2Lni转换地图后，你可以点击“详情”按钮查看本次转换的报告。<br>而本文的目的便是对这些报告做进一步的详细说明，帮助你更好的调整你的地图，从而在转化（尤其是SLK）后有更好的效果。</p>
<a id="more"></a>
<h2 id="严重错误"><a href="#严重错误" class="headerlink" title="严重错误"></a>严重错误</h2><p>转换后可能无法正常游戏。</p>
<h3 id="读取-XX-XX-个文件，还有XX个文件没有读取"><a href="#读取-XX-XX-个文件，还有XX个文件没有读取" class="headerlink" title="读取(XX/XX)个文件，还有XX个文件没有读取"></a>读取(XX/XX)个文件，还有XX个文件没有读取</h3><p>这个错误的原因是你的地图没有完整的 <strong>(listfile)</strong> 文件，虽然工具尝试搜索了导入列表（<strong>war3map.imp</strong>）但文件依然不全。</p>
<ul>
<li>影响： 转换出来的地图丢失部分文件。</li>
<li>原因： 你进行转换的地图已经被其他工具移除了 <strong>(listfile)</strong> 文件。（例如你曾经使用 <strong>Wc3MapMax++</strong> 优化过地图，且优化选项没有选择 <strong>保留listfile文件</strong>)</li>
<li>建议： 使用包含完整 <strong>(listfile)</strong> 文件的地图。</li>
</ul>
<h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h2><p>转换前的地图与转换后的地图内容可能存在差异。</p>
<h3 id="不支持的游戏数据设置"><a href="#不支持的游戏数据设置" class="headerlink" title="不支持的游戏数据设置"></a>不支持的游戏数据设置</h3><p>编辑器中你可以将地图的游戏数据设置为“1.07”、“自定义”或“最新版本”，这3种游戏数据在实际运行时会产生差异。例如：游戏数据设置为“1.07”时，无论用哪个版本的魔兽游玩此地图，冰霜巨龙的攻击类型均为“穿刺”；而将游戏数据设置为“最新版本”后，你使用1.07版本游玩，冰霜巨龙的攻击方式为“穿刺”，但你使用1.24版本游玩时，攻击方式却会变为“法术”。当你将地图进行SLK转换时，地图的版本便会固定在某个版本的数据。考虑到绝大部分地图都不是对战地图，游戏数据不应该根据魔兽版本的变化而变化，因此我们总是将地图固定在1.07版本。</p>
<ul>
<li>影响： 部分默认数据会发生变化。</li>
<li>原因： 游戏数据设置为了“自定义”或“最新版本”。</li>
<li>建议： 将游戏数据设置为“1.07”。（情节 –&gt; 游戏选项 –&gt; 游戏数据设置）</li>
</ul>
<h3 id="对象的ID冲突"><a href="#对象的ID冲突" class="headerlink" title="对象的ID冲突"></a>对象的ID冲突</h3><p>每个对象都有一个4位的ID，你可以在编辑器中按下Ctrl+D来查看它们。当地图没有SLK化时，魔兽可以正确区分类型不同但ID相同的对象（如单位 <strong>H000</strong> 和魔法效果 <strong>H000</strong>），也能正确区分字母相同但大小写不同的的对象（如英雄单位 <strong>H000</strong> 和普通单位 <strong>h000</strong>）。然而一旦当地图转换为SLK格式后，魔兽遍无法区分这些情况了，这些对象的文本可能会发生错乱。</p>
<ul>
<li>影响： 文本可能错乱。</li>
<li>原因： 这些对象的ID相同。（不考虑大小写）</li>
<li>建议： 重建这些对象，保证他们的ID互不冲突。</li>
</ul>
<h3 id="文本不能包含字符”-”-文本中的”-”被修改为了”-”"><a href="#文本不能包含字符”-”-文本中的”-”被修改为了”-”" class="headerlink" title="文本不能包含字符”}” / 文本中的”}”被修改为了”|”"></a>文本不能包含字符”}” / 文本中的”}”被修改为了”|”</h3><p>魔兽会将长文本在符号 <strong>}</strong> 处截断，例如你有个技能说明为“造成100点{火焰}伤害”，在魔兽中实际看到的则是“造成100点{火焰”。本工具会在转换地图时会尝试让这段文本正确显示，但在少数情况下还是需要修改这个符号才能正确显示。</p>
<ul>
<li>影响： 可能有部分文本显示不一样。（转换前的地图文本显示不全、转换后的地图符号 <strong>}</strong> 变成了 <strong>|</strong>）</li>
<li>原因： 长文本中使用了符号 <strong>}</strong>。</li>
<li>建议： 长文本中不要使用该符号。</li>
</ul>
<h2 id="没有SLK化的数据"><a href="#没有SLK化的数据" class="headerlink" title="没有SLK化的数据"></a>没有SLK化的数据</h2><p>SLK是一个适合游玩的格式，OBJ则是适合编辑的格式。魔兽加载SLK格式的速度要远快于加载OBJ格式的速度，这也是将地图转换为SLK格式的主要目的。然而在某些情况下，部分OBJ格式的数据无法转换为SLK格式，它们会继续以OBJ格式的形式留在你的地图里，从而拖慢地图的速度。一个优秀的地图作者应该尽量减少OBJ格式的数据。</p>
<h3 id="数据超过了4级"><a href="#数据超过了4级" class="headerlink" title="数据超过了4级"></a>数据超过了4级</h3><p>部分对象（如技能）可以有多个等级，你可以定义一个数据在不同等级时的数值。不过SLK格式最只支持1到4级的数据（装饰物可以支持到10级），超过4级的数据就只能保留为OBJ格式。</p>
<ul>
<li>影响： 拖慢游戏速度。</li>
<li>原因： 对象的等级超过4级。</li>
<li>建议： 对象的等级不要太高。</li>
</ul>
<h3 id="字符串可以被转换为数字"><a href="#字符串可以被转换为数字" class="headerlink" title="字符串可以被转换为数字"></a>字符串可以被转换为数字</h3><p>部分SLK格式的字符串数据（如模型路径）如果可以转换为数字，那么魔兽将无法正确识别此字符串。为了保证该数据正确生效，我们只能将其保留为OBJ格式。</p>
<ul>
<li>影响： 拖慢游戏速度。</li>
<li>原因： 字符串可以被转换为数字。（第一个字符是数字或 <strong>-</strong>，或者第一个字符是 <strong>.</strong> 且第二个字符是数字）</li>
<li>建议： 修改这些字符串，保证其不符合上述转换规则。</li>
</ul>
<h3 id="文本内容和另一个对象冲突"><a href="#文本内容和另一个对象冲突" class="headerlink" title="文本内容和另一个对象冲突"></a>文本内容和另一个对象冲突</h3><p>前文说过，当对象的ID冲突时他们的文本内容可能会发生错乱。目前我们会将这些冲突对象中类型相同的对象进行处理，将部分文本数据保留为OBJ格式以保证他们的文本不会错乱。</p>
<ul>
<li>影响： 拖慢游戏速度。</li>
<li>原因： 这些对象的ID相同。（不考虑大小写）</li>
<li>建议： 重建这些对象，保证他们的ID互不冲突。</li>
</ul>
<h3 id="文本内容同时包含了逗号和双引号"><a href="#文本内容同时包含了逗号和双引号" class="headerlink" title="文本内容同时包含了逗号和双引号"></a>文本内容同时包含了逗号和双引号</h3><p>由于转义符的原因，魔兽无法正确识别一个既包含符号 <strong>,</strong> 又包含符号 <strong>“</strong> 的SLK格式文本，所以这些文本也只能保留为OBJ格式了。</p>
<ul>
<li>影响： 拖慢游戏速度。</li>
<li>原因： 文本同时包含 <strong>,</strong> 和 <strong>“</strong>。</li>
<li>建议： 修改这些文本。</li>
</ul>
<h2 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h2><p>转换为SLK格式时，无论是用到的还是没用到的对象都会保存到地图里。而简化的目的则是将没有用到的对象删掉，将用到的对象留下。为了达成这个目的，我们会通过引用链来分析地图中有哪些对象是有用到的（即“引用分析”），这个分析过程比较复杂，因此我们提供了详细的报告供作者确认引用分析是否正确。特别说明的是，引用分析无法分析动态引用（例如根据输入的聊天信息创建任意单位）。如果你发现有些你需要的对象被意外删除了，你需要通过别的方式表明你对它的引用，例如：创建一个无用的触发器，将你需要的对象在里面提到一下。</p>
<h3 id="保留市场物品"><a href="#保留市场物品" class="headerlink" title="保留市场物品"></a>保留市场物品</h3><p>当你使用了以“市场”（<strong>nmrk</strong>）为模板的单位后，魔兽便会定期向这个单位添加“可被市场出售”的物品，因此所有设置了“可被市场出售”的物品都会被留下。</p>
<ul>
<li>建议： 如果你不需要市场的特性，请使用其他单位作为模板重建此对象。</li>
</ul>
<h3 id="简化时没有找到对象"><a href="#简化时没有找到对象" class="headerlink" title="简化时没有找到对象"></a>简化时没有找到对象</h3><p>在进行引用分析时，我们发现某个需要留下的对象根本不存在。一些常见的情况有：</p>
<ul>
<li>你曾经给单位的技能列表中添加了某个技能，但后来把这个技能删了。</li>
<li>触发器创建对象的时候写错了ID。</li>
<li><p>物编中按住shift填写的对象ID错误。注意，即使你填写了“ALOC”或是“Aloc123”，编辑器中依然会显示为“蝗虫”，但实际上该值是无效的。</p>
</li>
<li><p>建议： 删掉无效引用，改正错误引用。</p>
</li>
</ul>
<h3 id="引用未分类对象"><a href="#引用未分类对象" class="headerlink" title="引用未分类对象"></a>引用未分类对象</h3><p>引用了一个没有定义仅有文本的对象。</p>
<ul>
<li>建议： 用一个有定义的对象来替代它。</li>
</ul>
<h3 id="简化掉的对象数-XXX-YYY"><a href="#简化掉的对象数-XXX-YYY" class="headerlink" title="简化掉的对象数 XXX/YYY"></a>简化掉的对象数 XXX/YYY</h3><p>报告一下地图中一共有 <strong>YYY</strong> 个对象,其中 <strong>XXX</strong> 个对象由于没有引用到而被删除。</p>
<h3 id="保留的默认对象数-XXX-YYY"><a href="#保留的默认对象数-XXX-YYY" class="headerlink" title="保留的默认对象数 XXX/YYY"></a>保留的默认对象数 XXX/YYY</h3><p>地图中有 <strong>XXX</strong> 个默认对象被保留了下来。这里的默认对象指的是魔兽自带的，且完全没有修改过的对象。之后的报告会显示部分对象以及它们的引用来源。事实上绝大部分保留下来的默认对象并不会也不希望被用到，因此你需要想办法切断引用链。一个最代表性的例子：青蛙被某个马甲单位引用，这个马甲单位是从兽族苦工上复制出来的。具体引用链为：马甲单位-可建造建筑 –&gt; 风暴祭坛-训练单位 –&gt; 暗影猎手-技能 –&gt; 妖术-变形单位 –&gt; 青蛙。显然你需要把这个马甲单位的 <strong>可建造建筑</strong> 清空，因为它引用了一万个无用的默认对象。</p>
<ul>
<li>建议： 尽可能减少保留的默认对象，切断无用的引用链。</li>
</ul>
<h3 id="简化掉的自定义对象数-XXX-YYY"><a href="#简化掉的自定义对象数-XXX-YYY" class="headerlink" title="简化掉的自定义对象数 XXX/YYY"></a>简化掉的自定义对象数 XXX/YYY</h3><p>地图中有 <strong>XXX</strong> 个自定义对象被移除了。这里的自定义对象包括魔兽自带，但被你修改过的对象。当地图历经多个版本的变迁后难免会出现以前有用但后来被废弃的对象，你可以参考该报告来移除不需要的对象，从而加快地图开发效率。</p>
<ul>
<li>建议： 移除不需要的自定义对象。</li>
</ul>
<h2 id="公式计算失败"><a href="#公式计算失败" class="headerlink" title="公式计算失败"></a>公式计算失败</h2><p>部分文本中可以使用诸如 <strong><ahbz,dataa1></ahbz,dataa1></strong> 的形式来引用一个数据，转换为SLK格式后数据的值会被替换到文本中。</p>
<ul>
<li>影响： 文本显示不正确。</li>
<li>原因： <ul>
<li>对象不存在，例如 <strong><a000,dataa1></a000,dataa1></strong> ，但地图里并没有 <strong>A000</strong> 这个对象。</li>
<li>语法不正确，例如 <strong><ahbz.dataa1></ahbz.dataa1></strong>。</li>
<li>误用了 <strong>&lt;</strong> 符号，例如“对目标造成100点&lt;火焰&gt;伤害”。</li>
</ul>
</li>
<li>建议： 修改错误的语法，替换掉误用的 <strong>&lt;</strong> 符号。</li>
</ul>
<h2 id="无效的物编数据"><a href="#无效的物编数据" class="headerlink" title="无效的物编数据"></a>无效的物编数据</h2><p>OBJ数据里有一些无效的数据，一般是因为曾经使用过奇怪的工具生成过物编，或是使用的编辑器里有一些错误设置。</p>
<h2 id="保存到wts中的文本"><a href="#保存到wts中的文本" class="headerlink" title="保存到wts中的文本"></a>保存到wts中的文本</h2><p>编辑器会将长文本保存到 <strong>war3map.wts</strong> 文件中，而这正是导致地图加载速度缓慢的主要原因。使用此工具转换地图时会尽可能的将长文本放回到脚本或物编里，但由于有字符数限制，一些过长的文本还是只能保留在wts里。</p>
<ul>
<li>影响： 拖慢地图加载速度。</li>
<li>原因： 文本长度过长。</li>
<li>建议： 减少这些文本的长度。</li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="物编信息不完整，强制读取slk文件"><a href="#物编信息不完整，强制读取slk文件" class="headerlink" title="物编信息不完整，强制读取slk文件"></a>物编信息不完整，强制读取slk文件</h3><ul>
<li>影响： 会读取地图内的slk文件。</li>
<li>原因： 转换前的地图是SLK格式的地图。</li>
</ul>
<h3 id="没有找到字符串定义"><a href="#没有找到字符串定义" class="headerlink" title="没有找到字符串定义"></a>没有找到字符串定义</h3><ul>
<li>影响： 长文本显示为空字符串。</li>
<li>原因： 地图的 <strong>war3map.wts</strong> 文件被修改过。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用W3x2Lni转换地图后，你可以点击“详情”按钮查看本次转换的报告。&lt;br&gt;而本文的目的便是对这些报告做进一步的详细说明，帮助你更好的调整你的地图，从而在转化（尤其是SLK）后有更好的效果。&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://www.ydwe.net/categories/Tool/"/>
    
    
  </entry>
  
  <entry>
    <title>SLK工具评测</title>
    <link href="http://www.ydwe.net/2016/12/slk-tools/"/>
    <id>http://www.ydwe.net/2016/12/slk-tools/</id>
    <published>2016-12-24T17:49:00.000Z</published>
    <updated>2016-12-28T09:41:01.119Z</updated>
    
    <content type="html"><![CDATA[<p>目前国内有3款SLK工具<br>这里我会简单的横向评测一下这3款SLK工具</p>
<a id="more"></a>
<h5 id="这3款SLK工具分别是"><a href="#这3款SLK工具分别是" class="headerlink" title="这3款SLK工具分别是"></a>这3款SLK工具分别是</h5><ul>
<li>U9的地图优化精灵(Wc3SLKOpt,以下简称南瓜头)</li>
<li>老狼的Wc3MapMax++(以下简称老狼)</li>
<li>我们的w3x2lni(以下简称W2L)</li>
</ul>
<h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><h5 id="南瓜头"><a href="#南瓜头" class="headerlink" title="南瓜头"></a>南瓜头</h5><ul>
<li>无法打开被占用的地图。如果你开着编辑器，你需要先将编辑器关掉，或者复制一张地图出来才能进行优化。</li>
<li>可以以不重建地图的方式优化没有(listfile)的地图。</li>
<li>有较高几率失败或生成不正确的地图，需要多试几次。</li>
<li>地图内有外部导入的slk文件时无法优化对应的物编类型，例如有万能属性时无法优化技能。</li>
</ul>
<h5 id="老狼"><a href="#老狼" class="headerlink" title="老狼"></a>老狼</h5><ul>
<li>优化没有(listfile)的地图将导致文件丢失。</li>
</ul>
<h5 id="W2L"><a href="#W2L" class="headerlink" title="W2L"></a>W2L</h5><ul>
<li>不允许优化没有(listfile)的地图。如果(listfile)不完整会给出警告。</li>
<li>游戏数据设置不为“默认(1.07)”时部分数据可能会出现差异。这会在优化时给出警告。</li>
</ul>
<p>事实上slk工具的主要用途是将编辑器生成的地图转化为方便游戏的地图，而编辑器生成的地图肯定会有完整的(listfile)文件，因此老狼和W2L在优化地图时可以说是必定成功的。<br>游戏数据设置方面，选用最新数据的地图是不适合slk化的，因为他的作用是会让数据根据你魔兽版本而改变，而slk化会把你地图的数据固定在某一个版本，那么所谓的最新版本数据就没有意义了。我们认为大部分的人是对这个选项的作用不了解而误用了最新数据，所以我们会把slk的地图都强制为1.07的数据。</p>
<h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><ul>
<li>使用的测试地图为全明星战役(大小为73.1MB)</li>
</ul>
<h5 id="南瓜头-1"><a href="#南瓜头-1" class="headerlink" title="南瓜头"></a>南瓜头</h5><ul>
<li>不压缩模型: 体积为67.1MB,耗时约为20.9秒</li>
<li>压缩模型: 体积为61.3MB,耗时约为38.9秒</li>
</ul>
<h5 id="老狼-1"><a href="#老狼-1" class="headerlink" title="老狼"></a>老狼</h5><ul>
<li>不压缩模型: 体积为67.0MB,耗时约为27.3秒</li>
<li>压缩模型: 体积为61.2MB,耗时约为46.7秒</li>
</ul>
<h5 id="W2L-1"><a href="#W2L-1" class="headerlink" title="W2L"></a>W2L</h5><ul>
<li>不压缩模型: 体积为67.3MB,耗时约为8.7秒</li>
<li>压缩模型: 体积为61.6MB,耗时约为10.5秒</li>
</ul>
<p>体积方面，W2L生成的地图要相对大一些，主要是因为其他工具会去掉脚本里的注释与空格。但这一些差异在现在的环境下可以忽略不计了。<br>耗时方面，W2L作为一个使用脚本语言编写的工具速度却完爆另外2个C++写的工具，不禁让人产生“他们到底在做什么”的疑问。不过看到同样是C++写的模型压缩，W2L的模型压缩只花了不到2秒，而另外2个工具花了近20秒，对这个疑问也就释然了。</p>
<h1 id="SLK程度"><a href="#SLK程度" class="headerlink" title="SLK程度"></a>SLK程度</h1><h5 id="南瓜头-2"><a href="#南瓜头-2" class="headerlink" title="南瓜头"></a>南瓜头</h5><ul>
<li>不简化: 体积为5.04MB,保留对象数为5517</li>
<li>简化: 体积为2.90MB,保留对象数为4059</li>
</ul>
<h5 id="老狼-2"><a href="#老狼-2" class="headerlink" title="老狼"></a>老狼</h5><ul>
<li>不简化: 体积为4.85MB,保留对象数为5589</li>
<li>简化: 体积为3.21MB,保留对象数为3904</li>
</ul>
<h5 id="W2L-2"><a href="#W2L-2" class="headerlink" title="W2L"></a>W2L</h5><ul>
<li>不简化: 体积为4.52MB,保留对象数为5524</li>
<li>简化: 体积为2.54MB,保留对象数为3275</li>
</ul>
<p>由于南瓜头无法优化万能属性，在本次测试中我将地图里的万能属性文件删掉了，因此会和实际情况有所差异，不过保证了这次测试的相对公平。<br>W2L的简化程度明显高于南瓜头和老狼，不知为何南瓜头和老狼会保留全部的自定义对象，而W2L会把确实没有用到的自定义对象删除。那些没有用到的自定义对象会报告在“详情”里，作者可以通过该报告来决定删除以后不会再用到的对象，以加快地图编辑的效率。</p>
<h1 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h1><h5 id="南瓜头-3"><a href="#南瓜头-3" class="headerlink" title="南瓜头"></a>南瓜头</h5><ul>
<li>所有文本的双引号被强制转化为了单引号。这会导致实际文本与你的输入文本不符，甚至可能影响某些逻辑判断（如判断单位的名字等）。</li>
<li>多次优化同一张地图生成的文件可能会不一样，这些地图可能会丢失一些文件。这也是我当时放弃使用这个工具的主要原因。</li>
<li>生成的部分文件内容不规范（txt中部分对象的名字多了一个“]”符号）。</li>
<li>所有的自定义对象都被保留了下来，即使它们没有被用到。</li>
</ul>
<h5 id="老狼-3"><a href="#老狼-3" class="headerlink" title="老狼"></a>老狼</h5><ul>
<li>没有处理“既有双引号又有逗号”的文本，这些文本会显示不全。</li>
<li>“穿刺剑刃”等特殊技能复制出来的技能在经过SLK优化后，其中没有修改过的属性会丢失。</li>
<li>默认对象的文本描述结尾可能会多一个双引号。</li>
<li>误删了很多技能，例如邪恶狂热，甚至可能误删万能属性用到的技能。</li>
<li>误删了很多编辑器里不可见，但实际用有用的buff，例如生命周期buff（因此你用触发给单位添加生命周期“类”后,进度条上的文本“定时的生命”不见了）。</li>
<li>所有的自定义对象都被保留了下来，即使它们没有被用到。</li>
<li>空字符串依然会写着“TRIGSTR_XXX”,虽然字符串定义已经被删掉了。</li>
</ul>
<h5 id="W2L-3"><a href="#W2L-3" class="headerlink" title="W2L"></a>W2L</h5><ul>
<li>待补充。</li>
</ul>
<p>作为一个后来者，发现并修复前者的问题是相对简单的一步，而发现自己的问题就要困难的多。期待你的反馈！</p>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h5 id="南瓜头-4"><a href="#南瓜头-4" class="headerlink" title="南瓜头"></a>南瓜头</h5><ul>
<li>blp压缩功能无法使用（会导致贴图丢失）。</li>
<li>需要自己选择是否保留随机物品。</li>
<li>不能记忆你上次的配置。</li>
</ul>
<h5 id="老狼-4"><a href="#老狼-4" class="headerlink" title="老狼"></a>老狼</h5><ul>
<li>blp压缩功能没有明显效果（文件本身会变小，但压缩到地图里后就几乎没有变化，可能是减小的部分本来就会被压缩掉）。</li>
<li>需要自己选择是否保留随机物品。</li>
</ul>
<h5 id="W2L-4"><a href="#W2L-4" class="headerlink" title="W2L"></a>W2L</h5><ul>
<li>功能太少。</li>
</ul>
<p>我们省略了很多选项，并不是因为没有实现这些功能，而是会根据你地图的情况自动判断是否需要它们。<br>还有很多功能对地图的提升有限，因此我们暂时只提供了一些基础和高效的功能。<br>欢迎提出你的想法！</p>
<h1 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h1><h5 id="南瓜头-5"><a href="#南瓜头-5" class="headerlink" title="南瓜头"></a>南瓜头</h5><ul>
<li>对部分选项进行了说明，帮助用户进行正确的选择。</li>
<li>点击进度条会进入论坛，似乎是为了方便出问题时进行交流，不过很遗憾这个页面已经不见了。</li>
</ul>
<h5 id="老狼-5"><a href="#老狼-5" class="headerlink" title="老狼"></a>老狼</h5><ul>
<li>对大多数选项进行了较详细的说明，帮助用户进行正确的选择。</li>
</ul>
<h5 id="W2L-5"><a href="#W2L-5" class="headerlink" title="W2L"></a>W2L</h5><ul>
<li>优化结束后会提供报告，例如：<ul>
<li>重建地图时丢失的文件（需要包含完整的(listfile)）。</li>
<li>计算失败的公式。</li>
<li>引用的无效对象。</li>
<li>无用的自定义对象。</li>
<li>保留的默认对象,以及它们为什么被保留下来。</li>
</ul>
</li>
</ul>
<p>我们希望告诉作者如何让你的地图被我们的工具优化的更好，因此我们提供了很多有用的报告。<br>SLK的简化功能是通过引用搜索来实现的，只有当一个对象不可能出现在游戏中时我们才会将其移除。然而事实上有大量的对象被保留了下来，这是因为你地图的数据告诉我们他们确实有可能出现在游戏中，例如：<br>你有个马甲单位可以建造祭坛，祭坛可以召唤暗影猎手，暗影猎手可以学习妖术，妖术可以将一个单位变形成螃蟹。<br>所以当你在报告中看到“螃蟹 被保留（XXX马甲引用了它）”时请不要太惊讶，如果你确信不会也不希望出现某个玩家控制了该马甲单位并在游戏中变出一只螃蟹的情况，你知道该怎么做。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前国内有3款SLK工具&lt;br&gt;这里我会简单的横向评测一下这3款SLK工具&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://www.ydwe.net/categories/Tool/"/>
    
    
  </entry>
  
  <entry>
    <title>对施法流程的一点思考</title>
    <link href="http://www.ydwe.net/2016/02/cast/"/>
    <id>http://www.ydwe.net/2016/02/cast/</id>
    <published>2016-02-25T13:01:54.000Z</published>
    <updated>2016-02-25T13:34:58.486Z</updated>
    
    <content type="html"><![CDATA[<p>魔兽把施法流程分成了前摇、施法、后摇。但是最近在做一些技能时，我发现这三个阶段并不够用。</p>
<a id="more"></a>
<p>以龙珠中的龟派气功为例，可以分解为这几个阶段<br>1.双手放在腰间<br>2.高喊“龟派气功”，蓄力一会<br>3.双手向前推，发出冲击波<br>4.双手收回</p>
<p>实际上不少动漫里的大招，都会经历同样的这几个阶段。</p>
<p>如果用魔兽的施法流程，这是如何对应的呢？蓄力显然是持续施法，而1、4则对应了前摇和后摇。但3却无法包含在这三个阶段里，首先他不能是后摇，因为冲击波会在34之间放出。所以他只能属于施法阶段，但是从逻辑上他又不能属于施法阶段。比如龟派气功的威力由施法时间决定，显然你不能把3的时间也算在内了。所以3得是一个新的施法阶段，它在持续施法之后，但却不能像后摇那样随意取消，准备地说它更像前摇。<br>我们再回头看下龟派气功和暴风雪这种魔兽传统的持续施法有什么区别。暴风雪的效果出现在施法阶段，在施法阶段结束后，就收手了，所以施法后面接后摇。但龟派气功在施法阶段并没有产生效果，而是在施法阶段后，出手产生效果，再收手。这就是他们的区别。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;魔兽把施法流程分成了前摇、施法、后摇。但是最近在做一些技能时，我发现这三个阶段并不够用。&lt;/p&gt;
    
    </summary>
    
      <category term="X-Editor" scheme="http://www.ydwe.net/categories/X-Editor/"/>
    
    
  </entry>
  
  <entry>
    <title>X-Buff</title>
    <link href="http://www.ydwe.net/2015/09/buff-system/"/>
    <id>http://www.ydwe.net/2015/09/buff-system/</id>
    <published>2015-09-01T09:01:54.000Z</published>
    <updated>2015-09-01T13:47:33.019Z</updated>
    
    <content type="html"><![CDATA[<p>虽然在魔兽编辑器中，buff是一个很弱的概念，我们也很难围绕它干一些事情。但实际上，在现代的RPG类的游戏里，buff是一个很重要的组成部分，甚至不亚于技能。今天就给大家介绍X-Editor中的buff系统。</p>
<a id="more"></a>
<p>##buff的事件</p>
<p>buff有5个事件，分别是添加事件、删除事件、叠加事件、完成事件和心跳事件。添加事件和移除事件就是在buff被添加和被删除时触发的事件，如果你要做这样一个技能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">使用后，你的攻击力增加50，持续10秒。</div></pre></td></tr></table></figure></p>
<p>你只需要做一个buff，在buff的添加事件里，给buff的所有者增加50点攻击力，在删除事件里，给buff的所有者减少50点攻击力，并设置buff的持续时间为10秒，那么这个buff就做好了。</p>
<p>当单位上已经有一个同名buff，而又再次添加这个buff时就会触发叠加事件(在添加事件之前)。如果叠加失败，则不会触发添加事件。同样是之前的例子，如果你第一次使用之后3秒，再次使用这个技能，那么你希望发生什么事情？</p>
<ol>
<li>单位增加50点攻击力，持续7秒。</li>
<li>单位增加50点攻击力，持续10秒。</li>
<li>单位增加100点攻击力，持续10秒。</li>
<li>单位增加100点攻击力，持续7秒，之后增加50点攻击力，持续3秒。</li>
</ol>
<p>这是最常见的四种buff的叠加模式。我们先来考虑更普遍的问题，实际上buff的叠加可以分为两类，共存模式和独占模式。共存模式即是所有同名buff都会共存，独立作用；独占模式即是同名buff在同一时间只会存在一个。情况1~3实际上都是独占模式，情况4是共存模式。情况1，实际上就是再次使用技能什么事情都没有发生，也就是说新buff不能覆盖旧buff；情况2，实际上就是再次使用技能会刷新buff的数据，也就是说新buff会覆盖旧buff。</p>
<p>在新buff添加到单位身上时，会依次触发单位身上同名buff的叠加事件，你需要在事件中返回新旧buff的优先级谁大谁小。（优先度的概念下面还会用到，现在你可以简单地理解为需要返回是新buff可以覆盖旧buff还是新buff不可以覆盖旧buff）所以，情况1和情况2的叠加事件，你只需要简单地返回false和true，就能达到效果。而情况3，实际上是让新buff失败，但同时更新了旧buff的数据。（顺便说一句情况2还有更优的解，让新buff失败，但把新buff的数据复制到旧buff上）而情况4是共存模式，你只需要把buff设置为共存模式，那么所有同名buff就会共存，互不干涉。</p>
<p>buff设定的时间到期后，会依次触发完成事件和删除事件，而被主动删除时，则只会触发删除事件。一般完成事件是用来做一些必须达到指定时间才能触发的效果。心跳事件是指在buff在持续时间内，会定期触发的事件，比如用来做流血、中毒之类的效果。</p>
<p>##buff的叠加模式</p>
<p>在叠加事件中，我已经提到了buff有两种叠加模式，共存模式和独占模式。我们来看一个更复杂的例子，在魔兽中，鞋子的移动速度是不能叠加的，只取最高值。如果我们要用buff来做，要怎么做呢？显然我们的目的是要让同名buff只有效果最高的有效。首先考虑用共存模式还是独占模式，虽然buff只有最高的有效，但是考虑到如果最高的那个buff被移除后要让次高的buff生效，所以我们不能用独占模式，必须要让所有的同名buff都留下来。那么答案就出来了，我们需要在添加事件、删除事件和覆盖事件中，遍历单位身上的同名buff，找到效果最高的移动速度，用它来修改单位的移动速度。接下来还有另外一个问题，因为单位身上有多个同名的buff(但实际上只有一个起作用了)，我们还必须让生效的那个buff显示图标，而其他的不显示；亦或者再做一个纯显示用的buff，实际效果的buff都不显示。</p>
<p>是不是听起来有点复杂？所以对于这种buff，X-Editor里有更简单的做法。之前我有说过，覆盖事件实际上是比较新旧buff的优先级。独占模式下，只有优先级高的buff能留下来。而共存模式下，无论什么优先级都会留下来，但是所有的buff都会按优先级由高到低排序，我们可以把移动速度等价于buff的优先度，那么所有的同名buff就会按照增加的移动速度由高到低排列。此外X-Editor的buff还有一个参数，可以指定最多允许几个buff同时生效，共存模式下默认为无限个，但我们可以把它设置为1，这样就只有优先度最高的那个buff有效了。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> mt = ac.buff[<span class="string">'鞋-移动速度'</span>]</div><div class="line"><span class="comment">-- 死亡之后保持buff</span></div><div class="line">mt.keep = <span class="literal">true</span></div><div class="line"><span class="comment">-- 共存模式</span></div><div class="line">mt.cover_type = <span class="number">1</span></div><div class="line"><span class="comment">-- 只有1个同名buff生效</span></div><div class="line">mt.cover_max = <span class="number">1</span></div><div class="line"><span class="comment">-- 添加事件</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mt:on_add</span><span class="params">()</span></span></div><div class="line">	self.target:add_move_speed(self.move_speed)</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="comment">-- 删除事件</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mt:on_remove</span><span class="params">()</span></span></div><div class="line">	self.target:add_move_speed(-self.move_speed)</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="comment">-- 叠加事件</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mt:on_cover</span><span class="params">(new)</span></span></div><div class="line">	<span class="keyword">return</span> self.move_speed &lt; new.move_speed</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>考虑这种情况，有个buff你希望他是独占模式的，但是如果有两个相同的英雄时会出现什么情况呢，有可能两个相同英雄的buff就会相互覆盖。有时候是合理的，有时候却是不合理的。在X-Editor里，所谓的同名buff，实际上指的是buff的名字相同且buff来源也相同，所以两个相同英雄的buff之间不会相互影响。但如果你需要让不同来源但名字相同的buff被当作同名buff处理，你需要为这个buff指定为全局的buff，这样才会变成名字相同即为同名buff。</p>
<p>##模版buff</p>
<p>我们再来讨论流血、中毒等dot类的buff的做法。首先所有的dot都需要能独立作用，所以只能用共存模式，但共存模式有几个缺点，一是同名buff很多时浪费资源，二时大多数情况下我们只希望看到一个buff图标，所以我们可能需要做一个假buff来显示图标。实际上dot类的buff，我们也可以用独占模式做。我们需要把dot每一跳的伤害提前算好存在一个数组里；在叠加事件中，把新buff的每一跳伤害存到对应的数组位置上；在心跳事件中，我们只需要把数组中的对应的伤害直接拿出来用即可。这就是用独占模式来做dot的方法，不过我要说的并不是这个。我们可以看到dot并不是一个buff，而是一类buff，同一类buff有很多代码是相同的，在X-Editor中，会有很多这样的buff模版，你可以很简单地做出一个独占模式的dotbuff。(共存模式的dotbuff，太过于简单不需要模版)</p>
<p>此外在X-Editor中，光环和法球都是属于模版buff。光环就是一个会定时把自身添加给周围单位的buff，这个buff在非所有者身上时，只会持续很短的时间并且失去传染的能力。这是魔兽里圣骑士专注光环的完整实现</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> mt = ac.aura_buff[<span class="string">'专注光环'</span>]</div><div class="line"><span class="comment">-- 魔兽中两个不同的专注光环会相互覆盖，但光环模版默认是不同来源的光环不会相互覆盖，所以要将这个buff改为全局buff。</span></div><div class="line">mt.cover_global = <span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mt:on_add</span><span class="params">()</span></span></div><div class="line">	<span class="comment">-- 如果这个buff在所有者身上，则加上一个比较特别的特效</span></div><div class="line">	<span class="keyword">if</span> self.source == self.target <span class="keyword">then</span></div><div class="line">		self.source_eff = self.target:add_effect(<span class="string">'origin'</span>, <span class="string">[[Abilities\Spells\Human\DevotionAura\DevotionAura.mdl]]</span>)</div><div class="line">	<span class="keyword">end</span></div><div class="line">	<span class="comment">-- 受到影响的单位都会有一个简单的特效</span></div><div class="line">	self.target_eff = self.target:add_effect(<span class="string">'origin'</span>, <span class="string">[[Abilities\Spells\Other\GeneralAuraTarget\GeneralAuraTarget.mdl]]</span>)</div><div class="line">	<span class="comment">-- 增加护甲</span></div><div class="line">	self.target:add_defence(self.data.defence)</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mt:on_remove</span><span class="params">()</span></span></div><div class="line">	<span class="keyword">if</span> self.source_eff <span class="keyword">then</span> self.source_eff:<span class="built_in">remove</span>() <span class="keyword">end</span></div><div class="line">	self.target_eff:<span class="built_in">remove</span>()</div><div class="line">	self.target:add_defence(-self.data.defence)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">hero:add_buff <span class="string">'专注光环'</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">-- buff的来源是自己</span></div><div class="line">	source = hero,</div><div class="line">	<span class="comment">-- buff的数据，会在所有自己的子buff里共享这个数据表</span></div><div class="line">	data = &#123;</div><div class="line">		defence = <span class="number">1.5</span></div><div class="line">	&#125;,</div><div class="line">	<span class="comment">-- 光环的选择器</span></div><div class="line">	selector = ac.selector()</div><div class="line">		: in_range(hero, <span class="number">900</span>) <span class="comment">-- 半径为900的圆</span></div><div class="line">		: is_ally(hero)       <span class="comment">-- 友方单位</span></div><div class="line">		: of_not_building()   <span class="comment">-- 不是建筑</span></div><div class="line">		,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然在魔兽编辑器中，buff是一个很弱的概念，我们也很难围绕它干一些事情。但实际上，在现代的RPG类的游戏里，buff是一个很重要的组成部分，甚至不亚于技能。今天就给大家介绍X-Editor中的buff系统。&lt;/p&gt;
    
    </summary>
    
      <category term="X-Editor" scheme="http://www.ydwe.net/categories/X-Editor/"/>
    
    
  </entry>
  
  <entry>
    <title>万物皆模拟</title>
    <link href="http://www.ydwe.net/2015/07/everything-is-simulation/"/>
    <id>http://www.ydwe.net/2015/07/everything-is-simulation/</id>
    <published>2015-07-12T09:01:54.000Z</published>
    <updated>2015-07-12T09:11:08.086Z</updated>
    
    <content type="html"><![CDATA[<p>模拟在WE里是指，只使用J或者T实现某个技能/机制，而不借助魔兽自带的技能/机制。例如暴击，不模拟的方法是使用剑圣的致命一击，而模拟的方法在伤害事件里判断普攻，然后根据单位的暴击率计算是否暴击。不模拟的优点是简单、方便、效率高，而模拟的优点是灵活自由、可以实现一些前者难以实现的功能。例如，暴击加法叠加、暴击抗性、暴击事件等等。</p>
<a id="more"></a>
<p>从WE的发展历程来看，模拟在越来越多地被使用。原因我归纳了下有这几点</p>
<ul>
<li>魔兽自带的机制已经被玩家所厌倦，地图需要更多的创新</li>
<li>WE技术的发展，原来觉得难以实现或者不能实现的模拟，被一一得到解决</li>
<li>电脑硬件的发展，效率越来越变得不重要</li>
</ul>
<p>所以现在和今后，我相信模拟会被越来越多的人使用。现在模拟的问题在于，开发的门槛太高，对很多人来说，从零开始做一个全模拟的系统过于困难。不过我相信随着时间的推移，这个问题一定会得到解决的。</p>
<p>说回正题，正如大家已经知道的那样，我正在做一个新的编辑器，为了方便描述，先把他称之为X-Editor，对应的游戏称之为X-Game。在X-Game中所有的技能都会用‘模拟’的方式来实现，这虽然会牺牲一点性能，但我认为这是值得的。同样地，现在有很多游戏公司使用WE来做原型设计，比如梦三国(不过那个是抄袭不是设计，哈哈)，他们的方法一般是在WE上做好一张图，然后再移植到他们的编辑器/游戏上去，这个过程一般都是人工的。有没有更简单一点的方法呢，答案是有的，这也是YDWE在最近两年内一直在努力的方向，而Lua引擎正是这个连接魔兽和其他游戏的桥梁。届时，你可以用YDWE的Lua引擎做一张地图，然后代码可以在X-Editor上复用。</p>
<p>最后做个广告，现在90%以上的游戏公司会使用Lua来开发游戏，如果你想从事游戏相关的工作Lua是门必修课。如果你已经对WE很熟悉，用YDWE来学习Lua那真是再好不过了，希望YDWE真的可以帮到你们。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;模拟在WE里是指，只使用J或者T实现某个技能/机制，而不借助魔兽自带的技能/机制。例如暴击，不模拟的方法是使用剑圣的致命一击，而模拟的方法在伤害事件里判断普攻，然后根据单位的暴击率计算是否暴击。不模拟的优点是简单、方便、效率高，而模拟的优点是灵活自由、可以实现一些前者难以实现的功能。例如，暴击加法叠加、暴击抗性、暴击事件等等。&lt;/p&gt;
    
    </summary>
    
      <category term="X-Editor" scheme="http://www.ydwe.net/categories/X-Editor/"/>
    
    
  </entry>
  
  <entry>
    <title>新世界从今天开始</title>
    <link href="http://www.ydwe.net/2015/06/first-day/"/>
    <id>http://www.ydwe.net/2015/06/first-day/</id>
    <published>2015-06-20T09:53:54.000Z</published>
    <updated>2015-06-20T10:00:29.491Z</updated>
    
    <content type="html"><![CDATA[<p>今天正式离开了11，转眼间就四年过去了，看着11从零到辉煌再到衰落，我对11的付出和感情应该是无人可比的。这是一个终点，也是一个新的起点，因为我即将要做一个令人兴奋的项目，一个编辑器，一个moba游戏的地图编辑器。</p>
<a id="more"></a>
<p>得知我要走的原因，很多人不能理解，明明在11已经有开辟好的大片疆土，为什么还有去未知的世界冒险。可能我就是这么一个喜欢挑战的人，编辑器也是我一直想做的事情。两年前，我曾经说过有若干个编辑器在开发或者筹备中，然而除了DotA2编辑器都死掉了，而DotA2编辑器也一直难产中，我曾经做过的准备和计划一个都没用得上。所以当这个机会来临的时候，我又岂会轻易放过，与其等别人做，不如自己来做。当然这一切才刚刚开始，所以现在还没有什么可以跟你们说的。</p>
<p>最后说句题外话，最近DotA2的编辑器更新了一个版本，又有人来问我怎么看了。一直以来我都被贴着’DotA黑’这样的标签，好吧我承认我是。主观上，我对DotA并没有什么好或者不好的感情，因为我并不玩DotA/DotA2或者LOL。客观上，我并不认同DotA2的设计、策划等各方面。不过从今天起，我不再会对DotA2做任何评论，毕竟以前是自由身，所以说什么都无所谓，而现在别人会认为我在故意诋毁竞争对手，况且我也没必要帮对手改进产品不是吗。就让一切都用行动来说话吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天正式离开了11，转眼间就四年过去了，看着11从零到辉煌再到衰落，我对11的付出和感情应该是无人可比的。这是一个终点，也是一个新的起点，因为我即将要做一个令人兴奋的项目，一个编辑器，一个moba游戏的地图编辑器。&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://www.ydwe.net/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>虚幻4编辑器‘蓝图’评测报告</title>
    <link href="http://www.ydwe.net/2015/06/blueprint/"/>
    <id>http://www.ydwe.net/2015/06/blueprint/</id>
    <published>2015-06-11T05:53:54.000Z</published>
    <updated>2015-06-11T07:39:53.901Z</updated>
    
    <content type="html"><![CDATA[<p>虚幻4的蓝图(blueprint)简单来说和魔兽编辑器的触发编辑器类似，而作为今天主角，它的参照物也是魔兽编辑器(以下简称WE)的触发编辑器。我会在下面阐述和WE相比的缺点和优点，当然我作为一个用了八年WE的人来说，肯定会有某些先入为主的观点，所以从客观角度看，我说的蓝图的优点(和WE比)，那一定是优点，我说的缺点却不一定是。不过考虑到这个报告的受众也是WE使用者的话，我认为这样正好。</p>
<a id="more"></a>
<p>先来看一个蓝图的例子，效果是，按下”方向键下”，屏幕上会显示2、4、6、8、10。</p>
<p><img src="/images/blog/2015/blueprint-01.jpg" alt="blueprint-01"></p>
<p>为了让不懂蓝图的童鞋能理解，我做了与之等价的WE的触发<br><img src="/images/blog/2015/blueprint-02.png" alt="blueprint-02"></p>
<p>##第一印象</p>
<p>第一眼看上去，蓝图更为图形化的界面让人眼前一亮，各种鲜艳颜色的搭配也比WE略显凌乱的的界面更胜一筹。反观WE这边，文字显得比较多，这也跟WE是十多年前的产品有关。图形加色彩代替文字，这是近年来软件流行的趋势，这点上蓝图确实做得更好。</p>
<p>##阅读难度</p>
<p>然而，当我仔细考究蓝图中的这个触发时，却感觉这其中的逻辑让人很难理解，要知道这只是一个很简单很简单的触发，我很难想象一个复杂的触发要怎么看。为了说明这点，容我先对不懂蓝图的童鞋作下简单的说明。</p>
<p>蓝图中一个矩形框等价于WE中的一个UI。WE把UI分为了两大类action和call，action就是无返回值的UI，call就是有返回值的UI。在蓝图中也是这样，圆角矩形就是action，直角矩形的就是call，为了方便描述，我也把蓝图中的这两种UI称为action和call。在蓝图的action的左右分别有一个白色的简体（某些有多个），通过这个箭头你可以用<strong>白线</strong>把action都串起来(这类似于WE中UI之间的那条虚线)，然后虚幻就是按照这点白线执行action。在上面的例子里一个有四个action，从左往右分别是”方向键下按下事件”、”循环”、”条件判断”、”显示文字”，这和WE里的例子是一样，大家和对比下。</p>
<p>那么有颜色的线条又是什么鬼呢，我们知道在WE里一个UI会有若干个输入参数，而在蓝图里的表现就是白色箭头下的带颜色的小圈圈，左边是输入，右边是输出，你可以把输出的圈和另一个UI输入的圈连在一起，这样就把一个参数传递了过去。在WE我们通常会把需要使用多次的值存到变量里，变量就是连接不同UI的线条。而在蓝图中我们不需要变量，下图是一个创建单位的UI，可以看到在右侧就有一个圈，这就是创建出来的单位，当你需要用这个单位时，只需要把线练到这里来。</p>
<p><img src="/images/blog/2015/blueprint-03.png" alt="blueprint-03"></p>
<p>好了分析完毕，如果你已经理解我上面的说明，应该已经能看懂图1了。即使看得懂，我仍然觉得难以理解。首先，我认为蓝图的action UI做得不多，如果只保留action UI，你可以很容易看出触发的执行流程，尤其是有各种循环、分支的情况下，action可以一眼就是清楚输入参数和输出参数，这点也很不错。然而加上call，问题就来了。图1中有三个call，上面两个分别是摸和判断整数相等，这两个显然没WE中的 循环整数A mod 2 == 0来得清晰。由于call不需要有分支，所以图形化的展开反而增加了理解的难度。此外加上call之后，蜘蛛网一样的线条也会增加理解难度。</p>
<p>##操作便利</p>
<p>在WE中，写call是一件痛苦的事情，一个action里可能会嵌入十几层的call，如果你想修改第十层的内容，你只能一层一层地把UI点开。这还不算什么，如果我想把第二层的UI换成另一个，第三层之后的UI保持不变，怎么办？你只能把第二层之后的UI全部重写一遍。你想把一个call复制到另一个地方，怎么办？重写一遍。而在蓝图中，这些都很容易做到，因为在蓝图中action和call都是平铺在一起的，你可以像复制action一个复制call，操作action一样操作call。</p>
<p>##小结</p>
<p>蓝图之于WE的变化</p>
<ul>
<li>图形加色彩替换大量的文字，优点大于缺点。</li>
<li>赋予call等同于action的地位，优点是可以很方便地进行复制删除等编辑操作，缺点不利于阅读。</li>
<li>去掉变量改成连连看，优点用起来简单，缺点理解难。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虚幻4的蓝图(blueprint)简单来说和魔兽编辑器的触发编辑器类似，而作为今天主角，它的参照物也是魔兽编辑器(以下简称WE)的触发编辑器。我会在下面阐述和WE相比的缺点和优点，当然我作为一个用了八年WE的人来说，肯定会有某些先入为主的观点，所以从客观角度看，我说的蓝图的优点(和WE比)，那一定是优点，我说的缺点却不一定是。不过考虑到这个报告的受众也是WE使用者的话，我认为这样正好。&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://www.ydwe.net/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>地图推荐《全明星战役》</title>
    <link href="http://www.ydwe.net/2014/12/all-star-battle/"/>
    <id>http://www.ydwe.net/2014/12/all-star-battle/</id>
    <published>2014-12-19T08:53:54.000Z</published>
    <updated>2014-12-19T08:49:18.710Z</updated>
    
    <content type="html"><![CDATA[<p>Hi，好久不见的各位。一别又是几个月，虽然我现在很少出现，但其实我一直没有离开。这次给大家推荐一张地图<a href="http://baike.baidu.com/view/4502377.htm" target="_blank" rel="external">全明星战役</a> 。推荐这张地图并不是因为它有多好玩(事实上我从来没玩过它)，而且因为它使用的一些技术和理念，很值得拿来一说。</p>
<a id="more"></a>
<p>历经多年的开发，YDWE已经很强大，基本覆盖地图编辑的方方面面。不过也有一点小遗憾，多人协作开发。如何让一张地图可以让两个或者更多的人同时开发，想必是很多地图制作小组都遇到的问题。在年初的新年计划上，其实我已经有了开发的计划，可惜因为各种原因，我已经没有太多的时间和精力来开发YDWE，这个功能也就此搁置了。不过令我感到欣慰的时，全明星战役的作者已经在他的地图中实现了这一点，让我们来看看他是怎么做的吧。</p>
<p>多人协作开发，在软件开发中并不是一件很困难的事。这得益于强大的<a href="http://baike.baidu.com/view/2942399.htm" target="_blank" rel="external">版本控制工具</a> ，开发者可以分别独立开发自己的功能，最后通过版本控制工具合并为一个版本。不过版本控制工具只支持文本格式文件的管理，对于mpq、w3u、w3i这种私有格式的文件，版本控制工具显然是无能为力的。不过我们可以把这些文件全部转为文本格式的文件，那么版本控制工具就可以对我们的地图进行版本管理了。</p>
<p>全明星战役正是这样做的，它会把w3x文件解压为一个文件夹，包含地图内的所有文件，而w3u、w3i这些则会进一步转换为文本格式文件(txt)。当你需要编辑的时候，先把这个文件夹转换为一张完整的w3x地图，用编辑器打开编辑，编辑完毕再转换回一个文件夹，在版本管理工具里提交。如果只是简单的修改物编，你甚至可以不用打开编辑器，直接用记事本修改即可。如果你尝试过这种编辑地图的方式，我想你会爱上它的。</p>
<p>当然我我认为全明星战役还做得不管简便，如果可以直接打开一个文件夹，保存的时候也直接保存为一个文件夹，那就更方便了。</p>
<p>听起来，全明星战役怎么像是一个地图编辑器而不是一张地图？记得我曾经说过一句话，没有人使用了YDWE中5%以上的功能，这句话在今天看来依然适用。YDWE最核心的功能其实是高度可定制化，全明星战役就是这点的最好例子。另外，全明星战役开源的，有兴趣的童鞋可以前去围观，<a href="https://github.com/syj2010syj/All-Star-Battle-2" target="_blank" rel="external">围观地址</a> 。</p>
<p>全明星战役还有很多值得让人学习的地方，比如动态补丁、录像调试等功能，时间有限，我们下次再聊。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi，好久不见的各位。一别又是几个月，虽然我现在很少出现，但其实我一直没有离开。这次给大家推荐一张地图&lt;a href=&quot;http://baike.baidu.com/view/4502377.htm&quot;&gt;全明星战役&lt;/a&gt; 。推荐这张地图并不是因为它有多好玩(事实上我从来没玩过它)，而且因为它使用的一些技术和理念，很值得拿来一说。&lt;/p&gt;
    
    </summary>
    
      <category term="Example" scheme="http://www.ydwe.net/categories/Example/"/>
    
    
  </entry>
  
  <entry>
    <title>刷刷存在感</title>
    <link href="http://www.ydwe.net/2014/08/presence/"/>
    <id>http://www.ydwe.net/2014/08/presence/</id>
    <published>2014-08-16T15:53:54.000Z</published>
    <updated>2014-12-19T07:38:00.801Z</updated>
    
    <content type="html"><![CDATA[<p>Hi，好久不见的各位。虽然说过不再有1.28了，可我还是忍不住更新了，更新内容比较少，但总比没有好，您说是不。</p>
<a id="more"></a>
<p><a href="http://www.hiveworkshop.com/forums/warcraft-editing-tools-277/new-tesh-syntax-highlighter-warcraft-3-a-246081/" target="_blank" rel="external">NewTesh</a> 已经出现很久了，不过一直对中文的支持不好，作者又是个傲娇，不肯放出源码，所以一直没放到YDWE里。不过功能还是很强大的(和旧的TESH比)，详细可以看我贴吧里以前发过的贴。直到现在NewTesh还是只会搜索英文的触发编辑器窗口，为了兼容它，1.28里的YDWE的触发编辑器窗口名也改成了英文了，这个影响应该也不大，等NewTesh的作者肯放出源码再改吧。</p>
<p>可能熟悉我的人已经知道了，我已经离开11了，所以这次更新的JAPI大概也不会出现在11上，它是YDWE用户的“专属特权”！不过我听说腾讯对战平台已经支持YDWE的JAPI，但这事腾讯的人并没有知会我，他们会不会跟进我就不知道了。话说回来，虽然YDWE是开源的，但也是有“游戏规则”的，不是大街边上的无主之物，随意拿取。当然我也知道对流氓公司说“游戏规则”只是对牛弹琴，我也就吐个槽，没想怎么着。</p>
<p>这半年发生了很多事，也领悟到了很多东西，好的和不好的。跟你们说一个故事，同样一件事，A能力很强，一个人就能搞定，所以一直都是他一个人做，三年后他还是一个人在做；另一个人B他自己一个搞不定这件事，所以上头还给了他两个小弟，他们三个人一起才勉强能把这件事做好，三年后，B已经在领导几十个人的团队了。在A的领导看来，这件事不算是很难的事，因为一个人就够了。在B的领导看来，B是一个很厉害的人，因为他领导了几十个人把一个需要几十个人才能做的事做好了。希望大家不要犯A的错误，共勉。</p>
<p>最后，还在WE上努力各位，希望YDWE仍然能够帮得上你们的忙。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi，好久不见的各位。虽然说过不再有1.28了，可我还是忍不住更新了，更新内容比较少，但总比没有好，您说是不。&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://www.ydwe.net/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>思想汇报</title>
    <link href="http://www.ydwe.net/2014/05/thought-report/"/>
    <id>http://www.ydwe.net/2014/05/thought-report/</id>
    <published>2014-05-01T05:21:54.000Z</published>
    <updated>2014-12-19T07:38:00.788Z</updated>
    
    <content type="html"><![CDATA[<p>可能有些童靴已经发现了，一周一更的YDWE停止了一个月了。因为某些原因，我决定将YDWE的开发转入维护期，也就是目前没有1.28的开发计划，只修复1.27中的bug。事实上1.27.5虽然是测试版，但稳定性也没有问题，所以大家可以放心地把它当作正式版使用。</p>
<a id="more"></a>
<p>ydwe是一个开源软件，欢迎有能力的童靴到<a href="https://github.com/actboy168/YDWE" target="_blank" rel="external">GitHub</a>上提供你的PR（pull request），或者fork。事实上ydwe已经了有了一个非官方的<a href="https://github.com/shawwwn/YDWE" target="_blank" rel="external">fork</a>，里面提供了比官方版更多的japi函数。</p>
<p>正事说完，我们来聊聊别的东西吧。今年发生了很多事情，比如说，最近我已经从一名windows客户端的程序员转职成了一枚linux服务端的程序员，虽然后缀还是一样，不过其中的差别远比想象中的大。我在windows客户端这个领域上，不敢说登峰造极，也算是方方面面都能搞定的程度了，不过对于大多数没有追求的公司而言，客户端的事情，能凑合用就行，厉害与不厉害，对他们来说不重要也不关心。客户端程序员挺悲惨的，我虽然一开始选的路错了，但现在意识到应该还不算太晚。在linux上，我还是一只菜鸡，要学的东西太多太多了，比如最基础的linux上的各种命令还有vi的使用等，以前总是觉得vi是一个很反人类的东西，现在也渐渐地觉得在linux上vi确实是个不错的编辑器。</p>
<p>事情总是变化得太快，曾经我对新一代的编辑器充满着期待，比如DotA2编辑器、三国争霸2编辑器、众神争霸编辑器等，甚至还有YDWE和这些编辑器打通的计划并且还做了一些前期工作。不过也是最近我得到了一些不太好的消息，以至于那些编辑器以后会不会出现都成为了问题。未来的事谁说得好呢，指望那些掉到钱孔里的公司们永远都是一件不靠谱的事情，我们至少还有魔兽编辑器和YDWE。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可能有些童靴已经发现了，一周一更的YDWE停止了一个月了。因为某些原因，我决定将YDWE的开发转入维护期，也就是目前没有1.28的开发计划，只修复1.27中的bug。事实上1.27.5虽然是测试版，但稳定性也没有问题，所以大家可以放心地把它当作正式版使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://www.ydwe.net/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>简单Lua教程</title>
    <link href="http://www.ydwe.net/2014/04/lua-lesson/"/>
    <id>http://www.ydwe.net/2014/04/lua-lesson/</id>
    <published>2014-04-15T12:38:16.000Z</published>
    <updated>2016-05-20T08:14:38.621Z</updated>
    
    <content type="html"><![CDATA[<p>本文旨在让有jass基础的用户快速上手Lua,因此需要一定的jass基础.当然如果你有其他语言的基础那更好</p>
<a id="more"></a>
<p>##1.准备工作</p>
<p>最新版本的<a href="http://www.ydwe.net/download.html" target="_blank" rel="external">YDWE</a></p>
<p>建议在配置中关闭预处理器,因为它和Lua的一个符号有冲突,当然你也可以选择回避使用这个符号.</p>
<p>##2.入口</p>
<p>使用<figure class="highlight plain"><figcaption><span>Cheat("exec-lua: filename")```来运行地图中名称为"filename"的lua脚本</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">你可以选择在外部编写该脚本后导入地图,也可以通过YDWE在编辑器内编写并自动导入地图</div><div class="line"></div><div class="line">##3.在YDWE内写Lua脚本</div><div class="line"></div><div class="line">在YDWE的任何自定义代码区域输入以下内容</div><div class="line"></div><div class="line">```lua</div><div class="line">&lt;?import(&quot;filename&quot;)[[</div><div class="line"></div><div class="line">	script</div><div class="line">		</div><div class="line">]]?&gt;</div></pre></td></tr></table></figure></p>
<p>这段代码等价于你在地图内导入了一个名字为”filename”,内容为”script”的脚本</p>
<p>你可能迫不及待想要尝试写Lua了,不过在这里我要建议你在运行自己的Lua脚本之前,先<strong>单独</strong>运行一次以下代码(通过<figure class="highlight plain"><figcaption><span>Cheat("exec-lua: MU_console")```)</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```lua</div><div class="line">&lt;?import(&quot;MU_console.lua&quot;)[[</div><div class="line"></div><div class="line">	require(&quot;jass.runtime&quot;).console = true</div><div class="line">	</div><div class="line">]]?&gt;</div></pre></td></tr></table></figure></p>
<p>这段代码的效果是打开一个控制台窗口,这样如果你的其他Lua代码出现了错误,控制台窗口中将会显示出错误原因和错误位置,非常便利.此外通过Lua的print函数,你也可以将各种内容显示在这里</p>
<p>##4.hello world</p>
<p>没错,第一步是hello world</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"hello world"</span>)</div></pre></td></tr></table></figure>
<p>控制台窗口中将会显示”hello world”</p>
<p>##5.Lua的基本介绍</p>
<p>lua是一个简单,高效,强大的脚本语言,其语法和jass有很多相似之处,因此有jass基础的话可以很快掌握lua</p>
<p>lua和jass最大的不同在于lua不需要定义变量类型,例:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> a = <span class="number">1</span></div><div class="line"><span class="keyword">if</span> a == <span class="number">1</span> <span class="keyword">then</span></div><div class="line">	a = <span class="string">"等于1"</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>在这个例子中,a的类型分别为数字(number)与字符串(string)</p>
<p>lua的注释符为 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">你也可以进行多行注释</div><div class="line"></div><div class="line">```lua</div><div class="line">	--[[</div><div class="line">		我已经被注释掉了</div><div class="line">	--]]</div></pre></td></tr></table></figure></p>
<p>####在lua中有以下几个类型:</p>
<ul>
<li><p>nil   空值,任何变量在赋值前都是nil,给变量赋值nil相当于摧毁该变量,类似于jass中的null</p>
</li>
<li><p>boolean   布尔值,与jass一样包含true与false</p>
</li>
<li><p>number   数字,lua中的数字没有整数或实数之分,因此在lua中 5 / 2 == 2.5</p>
</li>
<li><p>string   字符串,与jass中的字符串基本相同</p>
</li>
<li><p>table   表,lua中最强大的类型,他可以简单的当做数组或哈希表使用,更是lua构成复杂的高级功能的基础,这将在之后重点学习</p>
</li>
<li><p>function   函数,与jass中的函数不同,lua中的函数也被视为一个值,你可以随时将它赋值给一个变量,或在其他函数中作为参数或返回值传递</p>
</li>
<li><p>userdata   自定义数据,你可以将其理解为jass中的handle,lua无法直接对其进行修改</p>
</li>
</ul>
<p>####lua有以下几个保留字:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">and</span> <span class="keyword">break</span> <span class="keyword">do</span> <span class="keyword">else</span> <span class="keyword">elseif</span></div><div class="line"><span class="keyword">end</span> <span class="literal">false</span> <span class="keyword">for</span> <span class="function"><span class="keyword">function</span> <span class="title">if</span></span></div><div class="line"><span class="title">in</span> <span class="title">local</span> <span class="title">nil</span> <span class="title">not</span> <span class="title">or</span></div><div class="line"><span class="title">repeat</span> <span class="title">return</span> <span class="title">then</span> <span class="title">true</span> <span class="title">until</span></div><div class="line"><span class="title">while</span></div></pre></td></tr></table></figure>
<p>与jass很像不是吗?</p>
<p>##6.值之间的操作</p>
<p>####运算<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> + <span class="number">2</span> == <span class="number">3</span></div><div class="line"><span class="number">3</span> * <span class="number">4</span> == <span class="number">12</span></div><div class="line"><span class="number">2</span> - <span class="number">6</span> == <span class="number">-4</span></div><div class="line"><span class="number">7</span> / <span class="number">2</span> == <span class="number">3.5</span></div><div class="line"><span class="number">4</span> ^ <span class="number">2</span> == <span class="number">16</span></div><div class="line"><span class="number">5</span> % <span class="number">1.5</span> == <span class="number">0.5</span></div><div class="line"><span class="number">1</span> .. <span class="number">1</span> == <span class="string">"11"</span></div><div class="line"><span class="string">"6"</span> + <span class="string">"7"</span> == <span class="number">13</span></div></pre></td></tr></table></figure></p>
<p>lua在必要的时候会自动转换类型,因此需要特别留意字符串是通过 .. 来连接的</p>
<p>此外lua还自带了 幂(^) 与 取模(%)</p>
<p>####逻辑<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> x == <span class="literal">true</span> <span class="keyword">then</span> <span class="comment">--1</span></div><div class="line">	a = <span class="number">1</span></div><div class="line"><span class="keyword">elseif</span> x <span class="keyword">then</span> <span class="comment">--2</span></div><div class="line">	a = <span class="number">2</span></div><div class="line"><span class="keyword">elseif</span> <span class="keyword">not</span> x <span class="keyword">then</span> <span class="comment">--3</span></div><div class="line">	a = <span class="number">3</span></div><div class="line"><span class="keyword">elseif</span> x <span class="keyword">and</span> y <span class="keyword">then</span> <span class="comment">--4</span></div><div class="line">	a = <span class="number">4</span></div><div class="line"><span class="keyword">elseif</span> x <span class="keyword">or</span> y <span class="keyword">then</span> <span class="comment">--5</span></div><div class="line">	a = <span class="number">5</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>lua的if结构与jass相似,只要注意endif要改成end</p>
<p>第2个条件中,只有当x的值为nil或false才不成立,其他情况包括0或””都是成立的</p>
<p>##7.变量</p>
<p>lua对变量进行操作时不需要 set 关键字</p>
<p>lua使用全局变量无须事先声明,任何时候<figure class="highlight plain"><figcaption><span>= 10```都是有效的.在a被赋值前,如果去获取a的值将返回"nil"</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">局部变量的声明方式类似于jass:</div><div class="line"></div><div class="line">```lua</div><div class="line">	local a = 10</div></pre></td></tr></table></figure></p>
<p>局部变量可以在任何位置声明,影响范围由声明的位置而定,例如:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> a = <span class="number">10</span></div><div class="line"><span class="keyword">if</span> a <span class="keyword">then</span></div><div class="line">	<span class="keyword">local</span> a = <span class="number">20</span></div><div class="line">	<span class="built_in">print</span>(a)</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="built_in">print</span>(a)</div></pre></td></tr></table></figure></p>
<p>将依次显示20与10</p>
<p>记住,lua不需要写变量类型哦</p>
<p>你可以一次声明多个变量</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x, y = <span class="number">10</span>, <span class="number">20</span> <span class="comment">--x = 10, y = 20</span></div><div class="line">x, y , z = <span class="number">10</span>, <span class="number">20</span> <span class="comment">--x = 10, y = 20, z = nil</span></div><div class="line">x, y = <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span> <span class="comment">--x = 10, y = 20, 30被丢弃</span></div><div class="line">x, y = y, x <span class="comment">--x = 20, y = 10</span></div></pre></td></tr></table></figure>
<p>##8.字符串</p>
<p>lua的字符串有3种符号,例:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">	text1 = <span class="string">"I'm hungry"</span></div><div class="line">	text2 = <span class="string">'"That loli seems delicacies!", I said'</span></div><div class="line">	text3 = <span class="string">[[</span></div><div class="line">"呜喵"\n"呜喵"\n"呜喵"</div><div class="line">	]]</div></pre></td></tr></table></figure></p>
<p>其中用[[]]表示的字符串将忠实的记录你输入的文字,忽略其中的任何转义符.如果你<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">&quot;呜喵&quot;\n&quot;呜喵&quot;\n&quot;呜喵&quot;</div></pre></td></tr></table></figure></p>
<p>需要注意的是,[[]]形式的字符串可能会与你的脚本产生一些冲突,例如<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">text = <span class="string">[[</span></div><div class="line">	a = t[v[5]]</div><div class="line">]]</div></pre></td></tr></table></figure></p>
<p>你可以改写成如下的形式<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">text = <span class="string">[===[</span></div><div class="line">	a = t[v[5]]</div><div class="line">]===]</div></pre></td></tr></table></figure></p>
<p>这样lua只会把拥有相同等号数量的括号认为是一组</p>
<p>同样的,你可以将YDWE内写lua的代码改成如下代码:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?import(filename)<span class="string">[=====[</span></div><div class="line"></div><div class="line">	script</div><div class="line">	</div><div class="line">]=====]?&gt;</div></pre></td></tr></table></figure></p>
<p>以回避一些冲突</p>
<p>##9.简单循环</p>
<p>lua有3种简单循环方式</p>
<p>####① for循环</p>
<p>最常用的循环方式</p>
<p>直接看例子</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">5</span> <span class="keyword">do</span></div><div class="line">	<span class="built_in">print</span>(i)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>将依次打印 1, 2, 3, 4, 5</p>
<p>你也可以指定循环的步长</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span> <span class="keyword">do</span></div><div class="line">	<span class="built_in">print</span>(i)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>将依次打印 1, 3, 5</p>
<p>需要注意的是,你无法通过修改i的值来控制循环</p>
<p>####② while循环</p>
<p>当条件成立时进行循环</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> i = <span class="number">1</span></div><div class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span> <span class="keyword">do</span></div><div class="line">	<span class="built_in">print</span>(i)</div><div class="line">	i = i + <span class="number">1</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>####③ repeat循环</p>
<p>当条件成立时退出循环</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> i = <span class="number">1</span></div><div class="line"><span class="keyword">repeat</span></div><div class="line">	<span class="built_in">print</span>(i)</div><div class="line">	i = i + <span class="number">1</span></div><div class="line"><span class="keyword">until</span> i &gt; <span class="number">5</span></div></pre></td></tr></table></figure>
<p>以上三种循环你都可以使用break来提前退出,常见的用法有</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> i = <span class="number">1</span></div><div class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></div><div class="line">	<span class="built_in">print</span>(i)</div><div class="line">	i = i + <span class="number">1</span></div><div class="line">	<span class="keyword">if</span> i &gt; <span class="number">5</span> <span class="keyword">then</span></div><div class="line">		<span class="keyword">break</span></div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>需要注意的是,break必须放在一段代码的最后面</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></div><div class="line">	<span class="keyword">break</span> <span class="comment">--错误,后面还有代码</span></div><div class="line">	<span class="keyword">local</span> i</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></div><div class="line">	<span class="keyword">do</span> <span class="keyword">break</span> <span class="keyword">end</span> <span class="comment">--正确.do XXX end是一段完整的代码,break确实放在了这段代码的最后面</span></div><div class="line">	<span class="keyword">local</span> i</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>##10.简单的数据结构</p>
<p>lua只有一种数据结构:table(表)</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">t = &#123;&#125; <span class="comment">--创建一张表并赋值给变量t</span></div><div class="line"></div><div class="line">t[<span class="number">1</span>] = <span class="number">10</span></div><div class="line">t[<span class="number">2</span>] = <span class="number">20</span></div></pre></td></tr></table></figure>
<p>任何非nil的值都可以作为table的索引</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">t = &#123;&#125;</div><div class="line"></div><div class="line">t[<span class="string">"x"</span>] = <span class="number">10</span></div><div class="line">t[<span class="literal">true</span>] = <span class="number">20</span></div><div class="line">t[<span class="number">1.23</span>] = <span class="number">30</span></div><div class="line">t[t] = t</div><div class="line">t[GetTriggerUnit()] = <span class="string">"呜喵"</span></div></pre></td></tr></table></figure>
<p>在lua中,可以将<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```lua</div><div class="line">	t[&quot;x&quot;] == t.x</div><div class="line">	t[&quot;1&quot;] ~= t[1]</div></pre></td></tr></table></figure></p>
<p>你可以在创建table的时候直接定义其数组内容,注意lua中的数组索引是从1开始的(jass是0),多个元素之间需要用逗号隔开</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">t = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; <span class="comment">--相当于t[1] = 1, t[2] = 2, t[3] = 3, t[4] = 4, t[5] = 5</span></div><div class="line">t = &#123;x = <span class="number">10</span>, y = <span class="number">20</span>&#125; <span class="comment">--相当于t.x = 10, t.y = 20</span></div><div class="line"></div><div class="line">t = &#123;</div><div class="line">	<span class="number">1</span>,        <span class="comment">-- t[1] = 1</span></div><div class="line">	x = <span class="number">10</span>,   <span class="comment">-- t.x = 10</span></div><div class="line">	y = <span class="number">20</span>,   <span class="comment">-- t.y = 20</span></div><div class="line">	<span class="number">2</span>         <span class="comment">-- t[2] = 2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过嵌套table,你可以很简单的构造出多维数组</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">t = &#123;&#125;</div><div class="line">t[<span class="number">1</span>] = &#123;&#125;</div><div class="line">t[<span class="number">1</span>][<span class="number">2</span>] = <span class="string">"呜喵"</span></div></pre></td></tr></table></figure>
<p>随着你对lua的深入,你可能会越来越多的使用这样的结构:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">hero = &#123;</div><div class="line">	name = <span class="string">"虐农先锋"</span>,</div><div class="line">	hp = &#123;<span class="number">500</span>, <span class="number">1000</span>&#125;,</div><div class="line">	mp = &#123;<span class="number">200</span>, <span class="number">300</span>&#125;,</div><div class="line">	[<span class="string">"坐标"</span>] = &#123;<span class="number">50</span>, <span class="number">100</span>&#125;,</div><div class="line">	[<span class="string">"技能"</span>] = &#123;</div><div class="line">		[<span class="string">"风暴之锤"</span>] =&#123;</div><div class="line">			id = |A000|,</div><div class="line">			mp = <span class="number">75</span>,</div><div class="line">			cd = &#123;<span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>&#125;</div><div class="line">		&#125;,</div><div class="line">		[<span class="string">"雷霆一击"</span>] =&#123;</div><div class="line">			id = |A001|,</div><div class="line">			mp = &#123;<span class="number">90</span>, <span class="number">100</span>, <span class="number">120</span>&#125;,</div><div class="line">			cd = &#123;<span class="number">15</span>, <span class="number">14</span>, <span class="number">13</span>&#125;</div><div class="line">		&#125;,</div><div class="line">	&#125;,</div><div class="line">	[<span class="string">"移动速度"</span>] = <span class="number">270</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##11.函数的声明</p>
<p>lua的函数声明有2种形式:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">(a, b, c)</span></span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">func = <span class="function"><span class="keyword">function</span><span class="params">(a, b, c)</span></span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这2种声明方式是完全等价的,都是声明了一个名字为”func”,参数为”a, b, c”的函数</p>
<p>显然这里的参数不需要填写类型,函数也不需要声明返回值的类型,顺便将endfunction改为end即可</p>
<p>从第二种声明方式中我们可以看出,lua中的函数是可以赋值给变量的:我声明了一个新的函数,然后将其赋值给变量”func”</p>
<p>一个简单的函数重载:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">R2I = math.floor <span class="comment">--math.floor是lua自带的取整函数</span></div><div class="line">R2I(<span class="number">1.5</span>) <span class="comment">--会去调用lua的math.floor而不是jass的R2I</span></div></pre></td></tr></table></figure>
<p>既然是变量,那么他也就可以局部化:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span><span class="params">()</span></span></div><div class="line">	<span class="keyword">local</span> func1 = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">end</span></div><div class="line"></div><div class="line">	<span class="keyword">local</span> func2 = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line">		<span class="keyword">return</span> <span class="number">2</span></div><div class="line">	<span class="keyword">end</span></div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(func1()) <span class="comment">-- 0</span></div><div class="line"><span class="built_in">print</span>(func1()) <span class="comment">-- 0</span></div><div class="line"><span class="built_in">print</span>(func2()) <span class="comment">-- func2不存在</span></div></pre></td></tr></table></figure>
<p>lua不限定函数的返回值,你可以返回或不返回;返回一个或返回多个;返回布尔或返回整数:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">(a)</span></span></div><div class="line">	<span class="keyword">if</span> a = <span class="number">1</span> <span class="keyword">then</span></div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">elseif</span> a == <span class="number">2</span> <span class="keyword">then</span></div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>, <span class="string">"wumiao"</span></div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(func(<span class="number">1</span>)) <span class="comment">-- 1</span></div><div class="line"><span class="built_in">print</span>(func(<span class="number">2</span>)) <span class="comment">-- 1	wumiao</span></div><div class="line"><span class="built_in">print</span>(func(<span class="number">3</span>)) <span class="comment">-- nil</span></div></pre></td></tr></table></figure>
<p>需要注意的是,与break一样,return必须放在一段代码的最后面</p>
<p>##12.函数的调用</p>
<p>lua调用函数显然是不需要写call这个关键字的,而且函数作为一个变量,只要他被赋值了你就可以去调用他,因此也没有声明顺序的问题</p>
<p>不过你依然需要关注一下局部函数的有效范围:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> func = <span class="function"><span class="keyword">function</span><span class="params">(a)</span></span></div><div class="line">	a = a <span class="keyword">or</span> <span class="number">1</span></div><div class="line">	<span class="keyword">if</span> a &lt; <span class="number">10</span> <span class="keyword">then</span></div><div class="line">		func(a + <span class="number">1</span>) <span class="comment">-- 错误,函数"func"没有被声明</span></div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>正确的写法应该是</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> func</div><div class="line">func = <span class="function"><span class="keyword">function</span><span class="params">(a)</span></span></div><div class="line">	a = a <span class="keyword">or</span> <span class="number">1</span></div><div class="line">	<span class="keyword">if</span> a &lt; <span class="number">10</span> <span class="keyword">then</span></div><div class="line">		func(a + <span class="number">1</span>)</div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>lua不关心你调用函数时的参数是否与函数声明时的参数一致,多余的参数被抛弃,不足的参数为nil,类似于多变量赋值</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">func = <span class="function"><span class="keyword">function</span><span class="params">(a, b, c)</span></span></div><div class="line">	<span class="built_in">print</span>(a)</div><div class="line">	<span class="built_in">print</span>(b)</div><div class="line">	<span class="built_in">print</span>(c)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">func(<span class="number">1</span>) <span class="comment">-- 1, nil, nil</span></div><div class="line"></div><div class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">-- 1, 2, 3</span></div></pre></td></tr></table></figure>
<p>同样的,一个拥有多返回值的函数也有类似的情况:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">func = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">a, b, c = func() <span class="comment">-- a = 1, b = 2, c = 3</span></div><div class="line">a, b = func() <span class="comment">-- a = 1, b = 2, 3被抛弃</span></div><div class="line">a, b, c, d = func() <span class="comment">-- a = 1, b = 2, c = 3, d = nil</span></div></pre></td></tr></table></figure></p>
<p>##13.表的简单操作</p>
<p>jass中是直接定义某个变量为数组的,而lua中则是将一个表赋值给一个变量,显然表也可以作为一个普通的对象进行传递</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">t = &#123;[<span class="number">0</span>] = <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, x = <span class="number">10</span>, y = <span class="number">20</span>, z = <span class="number">30</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</div></pre></td></tr></table></figure>
<p>这张表分为了2个部分,数组与哈希表.lua对数组的定义是从索引1开始的连续元素,因此t[0]是哈希表部分,而将t[3]截断后,之后元素不再连续,此时的数组大小便为2.我们可以通过符号#来获取数组部分的长度</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(#t) <span class="comment">-- 5</span></div><div class="line"></div><div class="line">t[<span class="number">3</span>] = <span class="literal">nil</span></div><div class="line"><span class="built_in">print</span>(#t) <span class="comment">-- 2</span></div></pre></td></tr></table></figure>
<p>有2种简单的方式来遍历表的数组部分</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i = <span class="number">1</span>, #t <span class="keyword">do</span></div><div class="line">	<span class="built_in">print</span>(i .. <span class="string">":"</span> .. t[i]) <span class="comment">--显示 1:2, 2:4, 3:6, 4:8, 5:10</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(t) <span class="keyword">do</span></div><div class="line">	<span class="built_in">print</span>(i .. <span class="string">":"</span> .. v) <span class="comment">--显示同上</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>第二种方式也是循环的一种,既然循环,他也可以用过break来提前退出</p>
<p>lua也提供了1种简单的方式来遍历表的所有元素</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></div><div class="line">	<span class="built_in">print</span>(i .. <span class="string">":"</span> .. v) <span class="comment">--可能显示 1:2, 2:4, 3:6, 4:8, 5:10, x:10, y:20, z:30</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>在例子中我之所说是可能显示,是因为哈希表部分的遍历顺序是随机的,与你存储的顺序无关.不过他依然会按照顺序先遍历出数组的部分</p>
<p>lua提供了2个常用的插入/移除函数:table.insert与table.remove</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">t = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line"></div><div class="line">table.insert(t, <span class="number">2</span>, <span class="number">4</span>) <span class="comment">--将4插入到t[2]的位置,之前从t[2]开始的元素都被挤得往后挪一个位置,变为&#123;1, 4, 2, 3&#125;</span></div><div class="line"></div><div class="line">table.insert(t, <span class="number">5</span>) <span class="comment">--在t的末端添加元素,变为&#123;1, 4, 2, 3, 5&#125;</span></div><div class="line"></div><div class="line">table.<span class="built_in">remove</span>(t, <span class="number">2</span>) <span class="comment">--移除t[3],之前从t[4]开始的元素都向前移动一个位置填补空缺,变为&#123;1, 4, 3, 5&#125;</span></div><div class="line"></div><div class="line">table.<span class="built_in">remove</span>(t) <span class="comment">--移除t末端的元素,变为&#123;1, 4, 3&#125;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文旨在让有jass基础的用户快速上手Lua,因此需要一定的jass基础.当然如果你有其他语言的基础那更好&lt;/p&gt;
    
    </summary>
    
      <category term="YDWE" scheme="http://www.ydwe.net/categories/YDWE/"/>
    
    
  </entry>
  
  <entry>
    <title>教你突破联机地图大小8MB限制</title>
    <link href="http://www.ydwe.net/2014/04/warcraft3-8mb-patch/"/>
    <id>http://www.ydwe.net/2014/04/warcraft3-8mb-patch/</id>
    <published>2014-04-13T08:41:54.000Z</published>
    <updated>2016-12-28T09:40:55.726Z</updated>
    
    <content type="html"><![CDATA[<p>##序言<br>不知道为什么暴雪要对联机地图的大小加以限制。不仅限制了地图大小，还限制了地图作者的创意。在魔兽渐渐淡出的日子里，暴雪终于想到了这个限制实在是太苛刻了，在众多地图作者，特别是dota作者的要求下，将这个限制放宽到了8MB。遗憾的是，尽管限制放宽了，依旧是治标不治本，太多的地图，8MB根本不够用。在1.20的年代，曾经有人做出了突破4MB的补丁（感谢地精研究院）。但到了现在的后1.24时代，老补丁不能用，网上搜索也找不到半点相关的信息。鉴于暴雪已经不关心魔兽了，我们非常有必要自力更生啊，自己动手，丰衣足食。</p>
<a id="more"></a>
<p>##动手步骤<br>下面我们开始动手。我们需要的工具很简单：<br>一个十六进制编辑器（例如WinHex，Hexworkshop，Ultraedit之类）</p>
<p>准备好工具后，正式开始我们的修改。修改步骤如下：</p>
<ul>
<li>备份game.dll</li>
<li>用十六进制编辑器打开game.dll</li>
<li>搜索所有的十六进制值 3D 00 00 80 00，修改为3D FF FF FF FF</li>
<li>保存game.dll</li>
</ul>
<p>完毕，很简单吧。1.24e版本的game.dll一共要替换3处地方。<br>上述方法适用于1.24a以及以后的所有魔兽版本。</p>
<p>##附注</p>
<ul>
<li>如果你想修改1.22~1.23的魔兽（大小限制是4MB），请把搜索的十六进制改成3D 00 00 40 00，替换的值不变。（未测试）</li>
<li>如果你想修改1.21b以及以前的魔兽，请自行在网上搜索补丁。</li>
<li>对于大于限制的地图，只有当参与联机的所有人都使用修改后的game.dll的情况下，才能正常联机。小于大小限制的地图联机无此要求，也就是说对于这类图，修改后的魔兽可以与原版的正常联机。</li>
<li>使用修改的game.dll有可能会被平台判定为作弊行为，或者会不起作用（因平台可能会载入自己的game.dll），因此如果在平台上玩请小心。</li>
</ul>
<p>##编后语<br>本文成文于两年前，而今已经有不少平台支持本补丁了，比如11平台的大地图房间，HF貌似也有某些房间支持。如果你想让你的ydwe也支持本补丁也是一件很简单的事情，ydwe支持魔兽补丁功能，你只需要在share/patch目录下新建一个目录(比如就叫8mb补丁)，然后按本文把修改过的game.dll放到这个目录下，再从配置程序中选择加载此补丁即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##序言&lt;br&gt;不知道为什么暴雪要对联机地图的大小加以限制。不仅限制了地图大小，还限制了地图作者的创意。在魔兽渐渐淡出的日子里，暴雪终于想到了这个限制实在是太苛刻了，在众多地图作者，特别是dota作者的要求下，将这个限制放宽到了8MB。遗憾的是，尽管限制放宽了，依旧是治标不治本，太多的地图，8MB根本不够用。在1.20的年代，曾经有人做出了突破4MB的补丁（感谢地精研究院）。但到了现在的后1.24时代，老补丁不能用，网上搜索也找不到半点相关的信息。鉴于暴雪已经不关心魔兽了，我们非常有必要自力更生啊，自己动手，丰衣足食。&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://www.ydwe.net/categories/Tool/"/>
    
    
  </entry>
  
  <entry>
    <title>坑爹的php</title>
    <link href="http://www.ydwe.net/2014/04/php-keng-die/"/>
    <id>http://www.ydwe.net/2014/04/php-keng-die/</id>
    <published>2014-04-07T01:41:54.000Z</published>
    <updated>2014-12-19T07:38:00.779Z</updated>
    
    <content type="html"><![CDATA[<p>周末研究了一下从c++调用php，看起来是一件很简单的事却折腾了我两天，总之是被坑惨了。虽然php是用c写的，不过看起来开发组只管自己用得溜就算了，完全没有考虑一般使用者的感受。</p>
<a id="more"></a>
<p>以下是我在msvc2010下编译php5.4.27的记录。</p>
<p>##坑之ZTS</p>
<p>php默认启用ZTS(php线程安全)，但ZTS宏却不是默认开启.如果你编译php时没有关掉ZTS，那么使用php api时会得到以下错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">error LNK2001: 无法解析的外部符号 __imp__compiler_globals</div><div class="line">error LNK2001: 无法解析的外部符号 __imp__executor_globals</div></pre></td></tr></table></figure></p>
<p>你需要自己定义ZTS<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define ZTS</div></pre></td></tr></table></figure></p>
<p>##坑之PHP_WIN32、ZEND_WIN32</p>
<p>完全想不出不通过_WIN32宏来生成PHP_WIN32、ZEND_WIN32宏的理由，总之你是需要自己来定义了。还有为什么会有PHP_WIN32和ZEND_WIN32两个宏呢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define ZEND_WIN32</div><div class="line">#define PHP_WIN32</div></pre></td></tr></table></figure></p>
<p>另外，虽然php不会理会_WIN32宏，但却会理会_WIN64宏。</p>
<p>##坑之ZEND_WIN32_FORCE_INLINE</p>
<p>如果说之前的坑只是懒，那这个坑只能说是逗了。让我们来看看ZEND_WIN32_FORCE_INLINE都干了些什么。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#undef inline</div><div class="line">#ifdef ZEND_WIN32_FORCE_INLINE</div><div class="line"># define inline __forceinline</div><div class="line">#else</div><div class="line"># define inline</div><div class="line">#endif</div></pre></td></tr></table></figure></p>
<p>注意，默认是没有定义ZEND_WIN32_FORCE_INLINE的，所以当你引用了php的头文件，你代码中inline就会全部失效。c++标准库的头文件中也使用了inline，所以就算你没用inline，一样会让你的代码无法编译。错误通常为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">error C2491: “std::flush”: 不允许 dllimport 函数 的定义</div><div class="line">error C2491: “std::ws”: 不允许 dllimport 函数 的定义</div></pre></td></tr></table></figure></p>
<p>所以ZEND_WIN32_FORCE_INLINE宏必须被定义，或者删掉这段略逗的代码。</p>
<p>##坑之_USE_32BIT_TIME_T</p>
<p>如果你没定义_WIN64宏，那么php会帮你定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#ifndef _WIN64</div><div class="line"># define _USE_32BIT_TIME_T 1</div><div class="line">#endif</div></pre></td></tr></table></figure></p>
<p>但msvc默认是不定义这个宏的，所以当你在未引用php头文件时，使用c++的头文件，使用的是64位time_t，引用php头文件后就变32位time_t了。错误通常为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stat.inl(42): error C2466: 不能分配常量大小为 0 的数组</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">time.inl(36): error C2664: “_ctime32”: 不能将参数 1 从“const time_t *”转换为“const __time32_t *”</div></pre></td></tr></table></figure></p>
<p>解决方法，删掉这段代码。</p>
<p>##坑之ZEND_DEBUG和UNICODE</p>
<p>_zend_executor_globals是php中一个很重要的结构体(也就是EG(xxx)),这个结构体中包含了一个<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724833%28v=vs.85%29.aspx" target="_blank" rel="external">OSVERSIONINFOEX</a>成员,而OSVERSIONINFOEX的长度会根据UNICODE宏的定义与否有所不同，php默认的编译选项是没有定义UNICODE宏的，如果你的工程定义了UNICODE宏，那么你就会获得很多迷のbug。ZEND_DEBUG也会有同样的问题，如果你编译时有–enable-debug，就必须定义ZEND_DEBUG，反之就不能定义。</p>
<p>php完全可以增加编译时的检查，以保证不会有类似的abi错误，但它没有这么做。</p>
<p>##坑之导出的全局变量</p>
<p>你可能无法想象，php不但很随意地使用了全局变量，并且还很随意地把它直接导出了。这种莫名其妙的设定遍地都是，不过我今天要说的是编译的坑。</p>
<p>表面上看，你在c++里直接使用php的头文件并没有什么问题，因为php在每个导出函数前都加了extern “C”，以保证c++编译器能找到php导出的函数。但这个并没有包括它导出的全局变量，所以当你在c++中使用它导出的全局变量时，就会得到一个链接错误。所以你必须给每个你要引用的php头文件加上extern “C”，就像这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">extern &quot;C&quot; &#123;</div><div class="line">#include &lt;zend.h&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>显然它原来自己加的extern “C”就没用了，倒不如你就像lua那样宣称我就是要用c，你要用c++就自己加extern “C”得了，做事做一半就不管了，算是个什么意思。</p>
<p>##坑之debug模式</p>
<p>当你编译为debug模式的php，php会为你做很多额外的检查，这本来是一件好事，但它最通常的做法就是直接崩掉，没有任何有用的提示；关掉debug模式的话，是ok的(至少表面看起来ok)。对于这种暴力的提示错误方式，我真不知道该如何招架，或许就php开发组的人玩得溜了。</p>
<hr>
<p><br><br><br><br>最后吐槽下php的代码到处都充斥着丑陋的TSRM宏，无论是否开启ZTS，tsrm_ls都应该作为一个外部参数传入，php不应该也没必要在内部保留自己的状态，无论是否开启ZTS。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周末研究了一下从c++调用php，看起来是一件很简单的事却折腾了我两天，总之是被坑惨了。虽然php是用c写的，不过看起来开发组只管自己用得溜就算了，完全没有考虑一般使用者的感受。&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://www.ydwe.net/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>《魔兽争霸III》版2048</title>
    <link href="http://www.ydwe.net/2014/04/warcraft3-2048/"/>
    <id>http://www.ydwe.net/2014/04/warcraft3-2048/</id>
    <published>2014-04-05T04:08:16.000Z</published>
    <updated>2014-12-19T07:38:00.778Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://baike.baidu.com/view/12517190.htm" target="_blank" rel="external"><strong>2048</strong></a>这个小游戏最近真是很火。这可能跟它操作简单却不乏趣味有关。它的操作很简单，你只需要按上下左右，相同的数字就会自动合并，而游戏的目标就正如它的名字一样，凑出2048就算胜利。</p>
<a id="more"></a>
<p>由于2048游戏的火热，不同衍生版层出不穷，<a href="http://tieba.baidu.com/home/main/?un=yichaodong" target="_blank" rel="external"><strong>yichaodong</strong></a>童靴也做了一个《魔兽争霸III》版2048。不仅还原了原版的2048，还加入了具有魔兽特色的人族版2048，不过我个人对龙鹰是2048，狮鹫是1024的设定存有异议，明明是狮鹫比较贵啊。</p>
<p><img src="/images/blog/2014/warcraft3-2048-1.jpg" alt="warcraft3-2048-1"></p>
<p><img src="/images/blog/2014/warcraft3-2048-2.jpg" alt="warcraft3-2048-2"></p>
<p><img src="/images/blog/2014/warcraft3-2048-3.jpg" alt="warcraft3-2048-3"></p>
<p><img src="/images/blog/2014/warcraft3-2048-4.jpg" alt="warcraft3-2048-4"></p>
<p>##<a href="http://pan.baidu.com/s/1dD9XfWH" target="_blank" rel="external">地图下载</a><br>请用ydwe1.25.8以上的版本打开</p>
<hr>
<p>##题外话</p>
<p>看到很多童靴还在1024和512里挣扎，下面分享两个玩2048技巧，掌握了的话，标准的4*4玩到2048基本没什么难度了。</p>
<ul>
<li>把最大的数留在最右下角的位置，次大的数留在右下角往上一格的位置；依次类推，尽量保证右边的的两列的格子都是下面比上面大，右边比左边大。为了达到这个目标，请记住一定不要按<strong>方向键左</strong>，这样最大的数就不会向右跑了。另外尽量保证最右边的一列4个格子都是满的，这样你才可以按<strong>方向键上</strong>而不会导致最大的数离开右下角；所以当最右边的一列格子不满或者最右边的一列可以合并时，一定不要按<strong>方向键上</strong>。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right"></th>
<th style="text-align:right">2</th>
<th style="text-align:right">32</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right"></td>
<td style="text-align:right">4</td>
<td style="text-align:right">16</td>
<td style="text-align:right">128</td>
</tr>
<tr>
<td style="text-align:right"></td>
<td style="text-align:right">16</td>
<td style="text-align:right">64</td>
<td style="text-align:right">512</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">8</td>
<td style="text-align:right">256</td>
<td style="text-align:right">1024</td>
</tr>
</tbody>
</table>
<ul>
<li>掌握了技巧1，基本上闭着眼睛都能玩到1024了，但一不小心可能就会碰上以下情形，方向键上下右都没法按，只能被迫按<strong>方向键左</strong>，悲剧从此开始，所以我们一定要避免这种情形。如果技巧1需要你考虑一步的情形，那么技巧2就需要你考虑两步的情形。走一步之前，考虑下走之后会不会进入这种情形，从而避免掉就行了。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">2</th>
<th style="text-align:right">4</th>
<th style="text-align:right">32</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right"></td>
<td style="text-align:right">4</td>
<td style="text-align:right">16</td>
<td style="text-align:right">128</td>
</tr>
<tr>
<td style="text-align:right"></td>
<td style="text-align:right">16</td>
<td style="text-align:right">64</td>
<td style="text-align:right">512</td>
</tr>
<tr>
<td style="text-align:right"></td>
<td style="text-align:right">8</td>
<td style="text-align:right">256</td>
<td style="text-align:right">1024</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/view/12517190.htm&quot;&gt;&lt;strong&gt;2048&lt;/strong&gt;&lt;/a&gt;这个小游戏最近真是很火。这可能跟它操作简单却不乏趣味有关。它的操作很简单，你只需要按上下左右，相同的数字就会自动合并，而游戏的目标就正如它的名字一样，凑出2048就算胜利。&lt;/p&gt;
    
    </summary>
    
      <category term="Example" scheme="http://www.ydwe.net/categories/Example/"/>
    
    
  </entry>
  
  <entry>
    <title>Lua引擎兼容性修改指导</title>
    <link href="http://www.ydwe.net/2014/04/lua-engine-update/"/>
    <id>http://www.ydwe.net/2014/04/lua-engine-update/</id>
    <published>2014-04-02T16:09:33.000Z</published>
    <updated>2014-12-19T07:38:00.778Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始做Lua引擎时，只是抱着玩玩的心态，很多东西没有认真地设计。所以在YDWE1.27，Lua引擎进行了大规模的修改，为了确保你的代码可以顺利过渡到1.28以上的YDWE，请仔细阅读文本。注：1.27支持新旧两种写法，但1.28只会支持新写法。</p>
<a id="more"></a>
<p>##Lua引擎加载</p>
<p>旧写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">call Cheat(&quot;run main.lua&quot;)</div></pre></td></tr></table></figure></p>
<p>新写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">call Cheat(&quot;exec-lua: &apos;main.lua&apos;&quot;)</div><div class="line">call Cheat(&quot;exec-lua: \&quot;main.lua\&quot;&quot;)</div><div class="line">call Cheat(&quot;exec-lua: main.lua&quot;)</div><div class="line">call Cheat(&quot;exec-lua:main.lua&quot;)</div><div class="line">call Cheat(&quot;exec-lua: main.lua &quot;)</div></pre></td></tr></table></figure></p>
<p>新写法中可以让你的代码看起来更清晰，同时也更加灵活.</p>
<p>##内置库不再默认加载</p>
<p>旧写法</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jass.DisplayTimedTextToPlayer(cj.GetLocalPlayer(), <span class="number">0</span>, <span class="number">0</span>, <span class="number">60.</span>, <span class="string">'hello'</span>)</div></pre></td></tr></table></figure>
<p>新写法<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> jass = <span class="built_in">require</span> <span class="string">'jass.common'</span></div><div class="line">jass.DisplayTimedTextToPlayer(jass.GetLocalPlayer(), <span class="number">0</span>, <span class="number">0</span>, <span class="number">60.</span>, <span class="string">'hello'</span>)</div></pre></td></tr></table></figure></p>
<p>在新写法中，Lua引擎不在预定义<strong>任何</strong>全局变量，包括jass/japi/jass_ext/slk。你需要在使用之前用require加载它。这样可以保证Lua引擎不会跟你的代码(的变量名)冲突。同时如果某些库你不用的话，就永远不会被加载，减少资源的消耗。</p>
<p>你可以把这段代码添加到所有代码的最前面，这样就能保证新写法和旧写法完全等价，不过我还是建议你使用局部变量，并且去掉不使用的库。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">jass = <span class="built_in">require</span> <span class="string">'jass.common'</span></div><div class="line">japi = <span class="built_in">require</span> <span class="string">'jass.japi'</span></div><div class="line">slk = <span class="built_in">require</span> <span class="string">'jass.slk'</span></div><div class="line">jass_ext = &#123;&#125;</div><div class="line">jass_ext.hook = <span class="built_in">require</span> <span class="string">'jass.hook'</span></div><div class="line">jass_ext.runtime = <span class="built_in">require</span> <span class="string">'jass.runtime'</span></div></pre></td></tr></table></figure></p>
<p>##控制台激活改变</p>
<p>旧写法<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jass_ext.EnableConsole()</div></pre></td></tr></table></figure></p>
<p>新写法<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> runtime = <span class="built_in">require</span> <span class="string">'jass.runtime'</span></div><div class="line">runtime.console = <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>同样地你可以使用以下代码来作兼容<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jass_ext.EnableConsole</span><span class="params">()</span></span></div><div class="line">	<span class="keyword">local</span> runtime = <span class="built_in">require</span> <span class="string">'jass.runtime'</span></div><div class="line">	runtime.console = <span class="literal">true</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>##|AHbz|的写法被移除</p>
<p>这不是一个标准的Lua语法，在Lua5.3中增加了|作为运算符，所以|AHbz|这种写法在5.3中会产生问题，我思考再三，还是决定将这种写法移除。不过值得庆幸的是，在5.3中加入了一个新函数string.unpackint，他可以将一个字符串当作二进制数组转为一个整数，这恰恰是可以让一个字符串”AHbz”转为整数的’AHbz’（注意我这里使用了Jass的写法）。就像这样</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string.unpackint(<span class="string">'AHbz'</span>, <span class="number">0</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure>
<p>或者这样<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ID</span><span class="params">(id)</span></span></div><div class="line">	<span class="keyword">return</span> string.unpackint(id, <span class="number">0</span>, <span class="number">4</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">ID <span class="string">'AHbz'</span></div></pre></td></tr></table></figure></p>
<p>不过目前Lua5.3还有很多不确定性，比如string.unpackint的第三个参数默认值总是8，所以你不能写成这样<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string.unpackint(<span class="string">'AHbz'</span>)</div></pre></td></tr></table></figure></p>
<p>或许在正式版中会有所改变，所以|AHbz|的写法<strong>暂时</strong>保留，不过最终应该还是会被我去掉的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始做Lua引擎时，只是抱着玩玩的心态，很多东西没有认真地设计。所以在YDWE1.27，Lua引擎进行了大规模的修改，为了确保你的代码可以顺利过渡到1.28以上的YDWE，请仔细阅读文本。注：1.27支持新旧两种写法，但1.28只会支持新写法。&lt;/p&gt;
    
    </summary>
    
      <category term="YDWE" scheme="http://www.ydwe.net/categories/YDWE/"/>
    
    
  </entry>
  
  <entry>
    <title>Jass编辑器推荐 Everedit</title>
    <link href="http://www.ydwe.net/2014/03/everedit-for-jass/"/>
    <id>http://www.ydwe.net/2014/03/everedit-for-jass/</id>
    <published>2014-03-30T13:20:09.000Z</published>
    <updated>2014-12-19T07:38:00.777Z</updated>
    
    <content type="html"><![CDATA[<p>从JassCraft到JassShopPro，再到Notepad++，以及这次的主角Everedit，我换了不少Jass的编辑器。算起来，我一周大概有50个小时以上在写代码，所以一个称手的编辑器对我来说至关重要。先不说对Jass的支持，单从一个通用文本编辑器的角度来看，Everedit也是我用过的最好用的编辑器（比如我现在就正在用Everedit写这篇博文）。</p>
<p>##安装<br>Everedit3.2起加入了扩展包的功能，极大地降低了扩展的安装难度，所以虽然Jass扩展支持3.2以下的Everedit，但由于安装步骤复杂这里不作介绍。</p>
<p>首先下载Everedit和Jass扩展包，解压Everedit到任意位置，打开Everedit，将Jass扩展包拖到Everedit上，然后点确定即可。</p>
<ul>
<li><a href="http://update.everedit.net/beta.php" target="_blank" rel="external">Everedit3.2下载地址</a></li>
<li><a href="http://pan.baidu.com/s/1bnnG1ZL" target="_blank" rel="external">Jass扩展包</a></li>
</ul>
<a id="more"></a>
<p>##语法高亮</p>
<p>支持Jass、vJass还有预处理的语法，包括TESH在内，这应该是唯一支持预处理的语法的语法高亮了。如果你是一个YDWE的重度使用者，你一定会对它爱不释手。完美支持YDWE的Jass代码，让我们来看看效果吧</p>
<p><img src="/images/blog/2014/everedit-1.jpg" alt="everedit-1"></p>
<p>##函数提示</p>
<p>支持所有cj和bj函数的提示，包括参数列表和中文翻译，以前有人为了背那些cj/bj函数，还特意弄个中英文对照的UI。有了它，你还需要翻UI？当词典用都行！</p>
<p><img src="/images/blog/2014/everedit-2.jpg" alt="everedit-2"><br><img src="/images/blog/2014/everedit-3.jpg" alt="everedit-3"></p>
<p>##内置JassHelper支持</p>
<p>你可以在Everedit直接使用JassHelper来检查语法</p>
<p><img src="/images/blog/2014/everedit-4.jpg" alt="everedit-4"></p>
<p>##题外话</p>
<p>如果你是一个YDWE纯Jass/vJass的使用者，我不推荐你使用YDWE内置的Jass编辑器(也就是TESH)作为你的主力编辑器，而是使用外置编辑器，比如Everedit，当然Notepad++也是个不错的选择。</p>
<p>YDWE支持脱离地图的脚本，你可以简单地把你的Jass脚本和你的地图放在同一个目录，然后在自定义脚本区内添加以下代码。这样你就可以在使用外置的编辑器来编辑你的地图脚本了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#include &quot;脚本A路径.j&quot;</div><div class="line">#include &quot;脚本B路径.j&quot;</div><div class="line">#include &quot;脚本C路径.j&quot;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从JassCraft到JassShopPro，再到Notepad++，以及这次的主角Everedit，我换了不少Jass的编辑器。算起来，我一周大概有50个小时以上在写代码，所以一个称手的编辑器对我来说至关重要。先不说对Jass的支持，单从一个通用文本编辑器的角度来看，Everedit也是我用过的最好用的编辑器（比如我现在就正在用Everedit写这篇博文）。&lt;/p&gt;
&lt;p&gt;##安装&lt;br&gt;Everedit3.2起加入了扩展包的功能，极大地降低了扩展的安装难度，所以虽然Jass扩展支持3.2以下的Everedit，但由于安装步骤复杂这里不作介绍。&lt;/p&gt;
&lt;p&gt;首先下载Everedit和Jass扩展包，解压Everedit到任意位置，打开Everedit，将Jass扩展包拖到Everedit上，然后点确定即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://update.everedit.net/beta.php&quot;&gt;Everedit3.2下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pan.baidu.com/s/1bnnG1ZL&quot;&gt;Jass扩展包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://www.ydwe.net/categories/Tool/"/>
    
    
  </entry>
  
  <entry>
    <title>hello</title>
    <link href="http://www.ydwe.net/2014/03/hello/"/>
    <id>http://www.ydwe.net/2014/03/hello/</id>
    <published>2014-03-26T07:53:18.000Z</published>
    <updated>2015-06-13T05:56:43.724Z</updated>
    
    <content type="html"><![CDATA[<p>这是个悲痛的消息，由于某些迷の原因，论坛君他已经阵亡了，如果你还想抢救一下他，请访问<a href="http://bbs.ydwe.net/" target="_blank" rel="external">这里</a>。</p>
<p>这就是我们的新家，你依然可以从<a href="http://www.ydwe.net/download.html" target="_blank" rel="external">这里</a>，获取最新的YDWE，感谢大家一直以来对我们的支持。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是个悲痛的消息，由于某些迷の原因，论坛君他已经阵亡了，如果你还想抢救一下他，请访问&lt;a href=&quot;http://bbs.ydwe.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这就是我们的新家，你依然可以从&lt;a 
    
    </summary>
    
    
  </entry>
  
</feed>
